<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>f00bar</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lancezhu.github.io/"/>
  <updated>2023-06-08T12:58:47.000Z</updated>
  <id>https://lancezhu.github.io/</id>
  
  <author>
    <name>lancezhu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>打造Vim为前端研发利器</title>
    <link href="https://lancezhu.github.io/2023/06/08/%E6%89%93%E9%80%A0Vim%E4%B8%BA%E5%89%8D%E7%AB%AF%E7%A0%94%E5%8F%91%E5%88%A9%E5%99%A8/"/>
    <id>https://lancezhu.github.io/2023/06/08/%E6%89%93%E9%80%A0Vim%E4%B8%BA%E5%89%8D%E7%AB%AF%E7%A0%94%E5%8F%91%E5%88%A9%E5%99%A8/</id>
    <published>2023-06-08T12:58:47.000Z</published>
    <updated>2023-06-08T12:58:47.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>更新中，未完成</strong></p><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://www.vim.org/" target="_blank" rel="noopener">Vim</a>作为一款文本编辑器，具备高度的定制性和优秀的键盘操作逻辑，自19世纪80年代诞生以来一直吸引大量开发者的使用。</p><p>相比于其它编辑器/IDE（VS Code、PyCharm等），Vim更加轻量、快速。同时，在多年的发展过程中，Vim及其生态不断迭代优化，吸收其它工具的优秀特性，成为功能强大的现代化编辑器。</p><p>通过配置可享受LSP server带来的便利和代码智能补全体验等等。</p><p>作为一个日常写前端的开发者，当然想将Vim这一得力工具融合进日常前端开发过程中，将Vim打造为前端研发利器。</p><p>首先通过广泛搜索、学习Vim使用者的配置和使用过程，得到一个通用的Vim配置。</p><p>并将Vim作为在一个半月实习过程中的主力开发工具，在实践中检验拓展，使得Vim能够满足<strong>前端开发</strong>的需求。</p><h2 id="前端开发常见需求"><a href="#前端开发常见需求" class="headerlink" title="前端开发常见需求"></a>前端开发常见需求</h2><ul><li>图片管理<ul><li>图片预览</li><li>查看图片基本信息</li></ul></li><li>代码文本格式化</li><li>调用系统工具<ul><li>复制文本到剪切板</li><li>打开文件浏览</li></ul></li><li>集成Git</li><li>鼠标移动</li><li>大项目管理</li></ul><h2 id="Vim配置"><a href="#Vim配置" class="headerlink" title="Vim配置"></a>Vim配置</h2><p>根据前端研发需求寻找到相应方案，汇总形成配置文件<a href="https://github.com/LanceZhu/.vimrc" target="_blank" rel="noopener">.vimrc</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;更新中，未完成&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.vim.org/&quot; ta
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>研究生三年</title>
    <link href="https://lancezhu.github.io/2022/12/24/%E7%A0%94%E7%A9%B6%E7%94%9F%E4%B8%89%E5%B9%B4/"/>
    <id>https://lancezhu.github.io/2022/12/24/%E7%A0%94%E7%A9%B6%E7%94%9F%E4%B8%89%E5%B9%B4/</id>
    <published>2022-12-24T02:29:00.000Z</published>
    <updated>2022-12-24T02:29:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="研究生三年"><a href="#研究生三年" class="headerlink" title="研究生三年"></a>研究生三年</h1><p>在三年研究生生涯即将结束之际，回头看整个过程，我是不太满意的。</p><p>最大的不满在于研究没做好。分析其原因，有多方面因素。当然主要还是自身因素。</p><h2 id="最初的选择"><a href="#最初的选择" class="headerlink" title="最初的选择"></a>最初的选择</h2><p>大二时，学校为英才班学生提供学院内博士生导师交流会，让同学们了解各位老师的研究方向，根据个人意愿选择导师，能尽早的接触科研工作。</p><p>当时对网络安全比较感兴趣，现在导师中的介绍中提及其团队内有涉及此方向的研究，便确定了选择。现在来看，当时应该在多做些调研，一是实验室内部对此</p><p>方向研究投入是否充足，二是观察下所有老师们的研究的主流方向，主流起码不会坑，三是对比下老师们的学生成果水平。一时的选择往往会发展为一世的选择。</p><p>在大二时，导师确定，至大四，缺少与导师和实验室的交流，形式还是停留在老师分配任务-学生执行的阶段。任务完成情况无论好坏，缺乏持续和深入的交</p><p>流，往往不了了之。较早确定导师，且经过这么长的时间，却没有找到研究的感觉，实在是没把握住机会。</p><h2 id="再次选择"><a href="#再次选择" class="headerlink" title="再次选择"></a>再次选择</h2><p>大四时，本科至研究生，还有重新选择导师的机会。此时，已经了解了导师研究的主要内容：大一新生的工程教育。这不是我们学院的优势：通信，也不是当时</p><p>的热门：人工智能，而且我个人太感兴趣，我更倾向于计算机。对自己学院的优势通信方向也不是太感兴趣。对于计算机方向的话，去了解了下其他学院的不同</p><p>实验室，结果未能去成。我想主要原因是不愿做出变化，一部分是对变化的恐惧，另一部分是不愿割舍已存在的。</p><h2 id="研究是什么、怎么做"><a href="#研究是什么、怎么做" class="headerlink" title="研究是什么、怎么做"></a>研究是什么、怎么做</h2><p>正式进入到研究生阶段后，导师对于学生是放养的状态，没有严格的要求。在此过程中，对于研究是什么及怎么做，是处于自行摸索的过程。错误的将工程开发理解成了科学研究。便热衷于学习各种软件开发技术，使用并在企业中实践，而未关注技术背后的原理、可能存在的问题与优化方向。接触的项目不少，却往往只停留在工程开发这一步，缺少了更深层次的挖掘。这也导致在论文阅读时的不够认真，论文读的少，不知如何找到合适的，高水平的，读得零散和粗略。无法确定自己的小研究方向，更谈不上建立研究方向所属的体系，发现其中的问题从而解决它了。</p><p>所幸，因为毕业时间的临近，导师督促起来，也幸好自己在摸索过程中培养的较好的工程能力，经过几个月的时间，将成果总结成一篇论文，作为科学研究能力的证明。当然还是有很多的问题，仍道阻且长。</p><h2 id="NEXT"><a href="#NEXT" class="headerlink" title="NEXT"></a>NEXT</h2><p>昨日往往，皆成今我。期望以后无论做什么都能从这件事中吸取教训，做好选择，做好选择的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;研究生三年&quot;&gt;&lt;a href=&quot;#研究生三年&quot; class=&quot;headerlink&quot; title=&quot;研究生三年&quot;&gt;&lt;/a&gt;研究生三年&lt;/h1&gt;&lt;p&gt;在三年研究生生涯即将结束之际，回头看整个过程，我是不太满意的。&lt;/p&gt;
&lt;p&gt;最大的不满在于研究没做好。分析其原因，
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Web开发工程质量保障</title>
    <link href="https://lancezhu.github.io/2022/05/17/Web%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E8%B4%A8%E9%87%8F%E4%BF%9D%E9%9A%9C/"/>
    <id>https://lancezhu.github.io/2022/05/17/Web%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E8%B4%A8%E9%87%8F%E4%BF%9D%E9%9A%9C/</id>
    <published>2022-05-17T02:41:58.000Z</published>
    <updated>2022-05-21T02:41:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Web开发工程质量保障"><a href="#Web开发工程质量保障" class="headerlink" title="Web开发工程质量保障"></a>Web开发工程质量保障</h1><blockquote><p>本文根据个人实践总结了一些提高 Web 开发交付质量可复用的模块。</p></blockquote><blockquote><p>主要涉及到的技术领域为前端开发、后端开发。</p></blockquote><blockquote><p>主要涉及到的编程语言：JavaScript、Node.js、Golang、Python。</p></blockquote><h2 id="保证编码质量"><a href="#保证编码质量" class="headerlink" title="保证编码质量"></a>保证编码质量</h2><p>Web前端开发最常用的编程语言为JavaScript，其作为一种弱类型语言，具有高度的灵活性。在带来编码灵活性的同时，也带来了维护和协作上的复杂度。为了提升编码质量，可通过统一代码风格、引入类型系统和合理抽象代码逻辑的方式进行保障。</p><h3 id="统一代码风格"><a href="#统一代码风格" class="headerlink" title="统一代码风格"></a>统一代码风格</h3><p>在多人协作的项目中，每个人代码风格各有不同，如在行尾加或不加<code>;</code>，这势必造成协作上的不协调。为了解决这一问题可引入<a href="https://eslint.org/" target="_blank" rel="noopener">Eslint</a>格式化代码。</p><p>Eslint通过设置各种规则来统一代码格式，如不能出现连续空行、每行长度不可过长等限制。将各种规则汇总起来便构成一种代码风格。Eslint中比较流行的有 <a href="https://github.com/airbnb/javascript/" target="_blank" rel="noopener">Airbnb</a>、<a href="https://github.com/standard/standard" target="_blank" rel="noopener">standard</a>。Airbnb相比于stanard限制程度更高。</p><p>以下示例中，eslint提示对常量<code>num</code>重新赋值。</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> cat index.js</span>const num = 1num = 2<span class="hljs-meta">$</span><span class="bash"> eslint index.js</span>index.js  2:1  error  'num' is constant                         no-const-assign  2:1  error  'num' is assigned a value but never used  no-unused-vars✖ 2 problems (2 errors, 0 warnings)</code></pre><h3 id="引入类型系统"><a href="#引入类型系统" class="headerlink" title="引入类型系统"></a>引入类型系统</h3><p>JavaScript是一种弱类型语言，即某个变量的类型在运行过程中是可变的。</p><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> num = <span class="hljs-number">1</span>num = <span class="hljs-string">'1'</span> <span class="hljs-comment">// 正常运行</span></code></pre><p>弱类型提高了编码的灵活性，但也容易导致预期外的错误。</p><pre><code class="hljs javascript"><span class="hljs-number">1</span> == <span class="hljs-string">'1'</span><span class="hljs-comment">// 预期输出：false</span><span class="hljs-comment">// 实际输出：true</span><span class="hljs-comment">// 原因：未校验类型</span></code></pre><p>为了解决这一问题，可通过引入类型系统，使用<a href="https://www.typescriptlang.org/" target="_blank" rel="noopener">TypeScript</a>。</p><p>以下示例TypeScript检测出类型错误。</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> cat index.ts </span>type User = &#123;  name: string&#125;let user1: User = &#123;  age: 18&#125;<span class="hljs-meta">$</span><span class="bash"> tsc index.ts</span>index.ts:6:3 - error TS2322: Type '&#123; age: number; &#125;' is not assignable to type 'User'.  Object literal may only specify known properties, and 'age' does not exist in type 'User'.6   age: 18    ~~~~~~~Found 1 error in index.ts:6</code></pre><h3 id="合理抽象代码逻辑"><a href="#合理抽象代码逻辑" class="headerlink" title="合理抽象代码逻辑"></a>合理抽象代码逻辑</h3><p>当业务逻辑变得复杂时，代码量增加，代码容易产生冗余和逻辑杂乱。此时可依据设计模式对代码逻辑合理抽象。</p><p>如Vue.js中实现数据在视图层和逻辑层的双向绑定便使用了观察者模式、后端维护单一的数据库连接即为单例模式、函数的编写应参考SOLID原则，做到单一职责、开闭原则等。</p><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>程序在运行过程中不可避免的会产生错误，需要对可预期的错误做好处理，根据业务逻辑选择是否停止运行和对使用者的提示。</p><p>在Web开发中，HTTP接口调用随处可见，前端提交表单，后端根据表单处理业务逻辑返回数据给前端。</p><p>在这一过程中，可预期的错误有：</p><p>前端：后端接口出错（返回码非200）、后端接口正常但提交表单不符合业务逻辑（用户名格式不符合要求）、网络错误（断网）。</p><p>后端：前端提交表单不符合业务逻辑（缺少字段，字段格式不对）、依赖的其他服务出错（MySQL、Redis等）。</p><p>对于以上可预期的错误均需做好应对，并对用户提示。如后端遇到前端提交表单不符合业务逻辑的情形，需要将捕获到的错误对前端返回并退出之后的逻辑处理。</p><h2 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h2><p>在软件的研发至上线过程中一般存在本地开发、上线测试环境、上线生产环境三个阶段。</p><p>不同的环境下MySQL、Redis等服务往往需要不同的配置。</p><p>首先要做的是区别不同的环境，这一任务可通过配置环境变量实现，</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> cat .env</span>NODE_ENV='prod' # 生产环境</code></pre><p>并根据不同的环境使用对应的配置，配置可放在环境变量中或者独立的配置文件中。</p><h2 id="日志记录"><a href="#日志记录" class="headerlink" title="日志记录"></a>日志记录</h2><p>软件上线后，在运行过程中产生的错误没有日志记录的话难以定位和调试。日志的存在也帮助理解用户对于软件的使用方式，方便之后的升级优化。</p><p>同时日志应注意分级记录（error、info等），不同级别方便日志筛选，错误排查。</p><h2 id="可用性及并发性"><a href="#可用性及并发性" class="headerlink" title="可用性及并发性"></a>可用性及并发性</h2><p>要保障软件的可用性，一是要提高软件本身的可靠性，尽可能做到自检、出现错误可自行重启恢复，二是对于软件自身不可恢复的情形下，做好告警，第一时间可通知到负责人进行检修。</p><p>软件上线时应预估可能的用户量，确保具备足够的承载能力，对于软件中资源消耗严重的部分（计算密集、IO密集）做好优化。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Web开发工程质量保障&quot;&gt;&lt;a href=&quot;#Web开发工程质量保障&quot; class=&quot;headerlink&quot; title=&quot;Web开发工程质量保障&quot;&gt;&lt;/a&gt;Web开发工程质量保障&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本文根据个人实践总结了一些提高 Web 开
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>devops</title>
    <link href="https://lancezhu.github.io/2022/02/14/devops/"/>
    <id>https://lancezhu.github.io/2022/02/14/devops/</id>
    <published>2022-02-14T04:21:36.000Z</published>
    <updated>2022-02-14T04:21:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="devops概念及实践"><a href="#devops概念及实践" class="headerlink" title="devops概念及实践"></a>devops概念及实践</h1><p>devops使得软件开发效率大幅提升，本文根据个人经验与理解，介绍对于何为devops及其实践的粗浅理解。</p><blockquote><p>持续更新中…</p></blockquote><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>用一个图来介绍devops。</p><p><img src="/images/devops.png" alt="devops"></p><p>devops由Dev和Ops构成，涵盖了整个软件开发的生命周期。</p><p>plan -&gt; code -&gt; build -&gt; test -&gt; release -&gt; deploy -&gt; operate -&gt; monitor -&gt; plan</p><p>devops将整个软件开发所涉及的方方面面整合到一块，以自动化的方式联系起来，从而使得软件的交付更为高效。</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>对应到上图，实践层面则是将devops的各组成部分以平台的形式实现出来。</p><p>plan：项目管理的最简易版本可依托GitHub、GitLab自带的Issues实现。<br>code: GitLab</p><h3 id="产品优缺点"><a href="#产品优缺点" class="headerlink" title="产品优缺点"></a>产品优缺点</h3><h3 id="自建平台"><a href="#自建平台" class="headerlink" title="自建平台"></a>自建平台</h3><h3 id="市面产品"><a href="#市面产品" class="headerlink" title="市面产品"></a>市面产品</h3><p>coding</p><p>云效</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;devops概念及实践&quot;&gt;&lt;a href=&quot;#devops概念及实践&quot; class=&quot;headerlink&quot; title=&quot;devops概念及实践&quot;&gt;&lt;/a&gt;devops概念及实践&lt;/h1&gt;&lt;p&gt;devops使得软件开发效率大幅提升，本文根据个人经验与理解，介绍对
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>腾讯实习面经</title>
    <link href="https://lancezhu.github.io/2021/12/16/%E8%85%BE%E8%AE%AF%E5%AE%9E%E4%B9%A0%E9%9D%A2%E7%BB%8F/"/>
    <id>https://lancezhu.github.io/2021/12/16/%E8%85%BE%E8%AE%AF%E5%AE%9E%E4%B9%A0%E9%9D%A2%E7%BB%8F/</id>
    <published>2021-12-16T07:54:05.000Z</published>
    <updated>2022-02-14T07:54:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="腾讯日常实习面经"><a href="#腾讯日常实习面经" class="headerlink" title="腾讯日常实习面经"></a>腾讯日常实习面经</h2><p>记录下腾讯日常实习的面试流程及面试内容。投递的前端开发，面试的后台开发岗位。</p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>整体进度较慢，从第一次面试至拿到实习Offer有将近一个月的时间（2021.11.09-2021.12.07）。</p><p>有三次技术面试、HR面试、综合素质测评。</p><h3 id="面试内容"><a href="#面试内容" class="headerlink" title="面试内容"></a>面试内容</h3><h4 id="技术面试"><a href="#技术面试" class="headerlink" title="技术面试"></a>技术面试</h4><p>共包含三次技术面试，均是通过腾讯会议进行的。时长大致一小时左右。</p><p>面试主要内容考察投递岗位所需的基础知识；项目经历，由浅入深逐步考察；一两道算法题，大致LeetCode easy和medium难度。通过腾讯会议中集成的面呗进行考察，编程语言不限。</p><p>算法题参考：</p><p>快速排序</p><p>反转链表（<a href="https://leetcode.com/problems/reverse-linked-list/）" target="_blank" rel="noopener">https://leetcode.com/problems/reverse-linked-list/）</a></p><p>二维矩阵搜索（<a href="https://leetcode.com/problems/search-a-2d-matrix/）" target="_blank" rel="noopener">https://leetcode.com/problems/search-a-2d-matrix/）</a></p><p>01矩阵最大正方形面积（<a href="https://leetcode.com/problems/maximal-square/）" target="_blank" rel="noopener">https://leetcode.com/problems/maximal-square/）</a></p><h4 id="HR面"><a href="#HR面" class="headerlink" title="HR面"></a>HR面</h4><p>电话面试，十分钟左右。主要了解下实习的时长，是否有亲属在腾讯工作。</p><h4 id="录用意向评估（云证-综合素质测评）"><a href="#录用意向评估（云证-综合素质测评）" class="headerlink" title="录用意向评估（云证+综合素质测评）"></a>录用意向评估（云证+综合素质测评）</h4><p>云证：上传身份证</p><p>综合素质测评：一些关于性格、理解能力、团队相处的基础性题目。</p><h4 id="电子签约（Offer发放）"><a href="#电子签约（Offer发放）" class="headerlink" title="电子签约（Offer发放）"></a>电子签约（Offer发放）</h4><p>学生资质等材料上传，协议签署。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;腾讯日常实习面经&quot;&gt;&lt;a href=&quot;#腾讯日常实习面经&quot; class=&quot;headerlink&quot; title=&quot;腾讯日常实习面经&quot;&gt;&lt;/a&gt;腾讯日常实习面经&lt;/h2&gt;&lt;p&gt;记录下腾讯日常实习的面试流程及面试内容。投递的前端开发，面试的后台开发岗位。&lt;/p&gt;
&lt;h3
      
    
    </summary>
    
    
    
      <category term="实习" scheme="https://lancezhu.github.io/tags/%E5%AE%9E%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Golang</title>
    <link href="https://lancezhu.github.io/2021/03/22/Golang/"/>
    <id>https://lancezhu.github.io/2021/03/22/Golang/</id>
    <published>2021-03-22T01:26:20.000Z</published>
    <updated>2021-04-21T01:26:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h1><p>一门开源编程语言，构建简单、可靠、高效软件。</p><blockquote><p>官网：<a href="https://golang.org/" target="_blank" rel="noopener">golang.org</a></p></blockquote><h2 id="应用框架"><a href="#应用框架" class="headerlink" title="应用框架"></a>应用框架</h2><ul><li><p>Gin</p><p><a href="https://github.com/gin-gonic/gin" target="_blank" rel="noopener">https://github.com/gin-gonic/gin</a></p><p>Web 框架</p></li><li><p>Gorm</p><p><a href="https://github.com/go-gorm/gorm" target="_blank" rel="noopener">https://github.com/go-gorm/gorm</a></p><p>ORM 库</p></li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="切换代理"><a href="#切换代理" class="headerlink" title="切换代理"></a>切换代理</h3><pre><code class="hljs bash">$ <span class="hljs-built_in">export</span> GO111MODULE=on$ <span class="hljs-built_in">export</span> GOPROXY=https://goproxy.cn</code></pre><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><ul><li><p><a href="https://betterprogramming.pub/go-4f365468dbd5" target="_blank" rel="noopener">https://betterprogramming.pub/go-4f365468dbd5</a></p><p>Golang 基础介绍，包括数据类型，结构等。</p></li><li><p><a href="https://www.practical-go-lessons.com/" target="_blank" rel="noopener">https://www.practical-go-lessons.com/</a></p><p>Golang 系统介绍</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Golang&quot;&gt;&lt;a href=&quot;#Golang&quot; class=&quot;headerlink&quot; title=&quot;Golang&quot;&gt;&lt;/a&gt;Golang&lt;/h1&gt;&lt;p&gt;一门开源编程语言，构建简单、可靠、高效软件。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;官网：&lt;a href=
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>nlp</title>
    <link href="https://lancezhu.github.io/2021/03/08/nlp/"/>
    <id>https://lancezhu.github.io/2021/03/08/nlp/</id>
    <published>2021-03-08T02:47:04.000Z</published>
    <updated>2021-03-08T02:47:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自然语言处理学习笔记"><a href="#自然语言处理学习笔记" class="headerlink" title="自然语言处理学习笔记"></a>自然语言处理学习笔记</h1><h2 id="语言模型"><a href="#语言模型" class="headerlink" title="语言模型"></a>语言模型</h2><p>n-gram</p><h2 id="预训练模型"><a href="#预训练模型" class="headerlink" title="预训练模型"></a>预训练模型</h2><p>GPT</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;自然语言处理学习笔记&quot;&gt;&lt;a href=&quot;#自然语言处理学习笔记&quot; class=&quot;headerlink&quot; title=&quot;自然语言处理学习笔记&quot;&gt;&lt;/a&gt;自然语言处理学习笔记&lt;/h1&gt;&lt;h2 id=&quot;语言模型&quot;&gt;&lt;a href=&quot;#语言模型&quot; class=&quot;head
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>FE-tools</title>
    <link href="https://lancezhu.github.io/2021/03/01/FE-tools/"/>
    <id>https://lancezhu.github.io/2021/03/01/FE-tools/</id>
    <published>2021-03-01T06:33:03.000Z</published>
    <updated>2021-03-01T07:33:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端开发效率工具"><a href="#前端开发效率工具" class="headerlink" title="前端开发效率工具"></a>前端开发效率工具</h1><p>推荐几前端开发过程中常用工具。</p><h2 id="postman"><a href="#postman" class="headerlink" title="postman"></a>postman</h2><blockquote><p>官网：<a href="https://www.postman.com/" target="_blank" rel="noopener">https://www.postman.com/</a></p></blockquote><p>可视化网络请求工具，用于调试接口。</p><p><img src="https://i.loli.net/2021/03/01/bBkvrOERCGL9eDw.png" alt="postman.png"></p><h2 id="serve"><a href="#serve" class="headerlink" title="serve"></a>serve</h2><blockquote><p>官网：<a href="https://github.com/vercel/serve" target="_blank" rel="noopener">https://github.com/vercel/serve</a></p></blockquote><p>快速启动 Web 服务器，服务指定目录。</p><p>使用场景：</p><ul><li>预览静态网站</li><li>简易文件服务器</li></ul><p><img src="https://user-images.githubusercontent.com/6170607/40541195-167ff460-601b-11e8-8f66-3b0c7ff96cbb.png" alt="serve"></p><h2 id="ngork"><a href="#ngork" class="headerlink" title="ngork"></a>ngork</h2><blockquote><p>官网：<a href="https://github.com/inconshreveable/ngrok" target="_blank" rel="noopener">https://github.com/inconshreveable/ngrok</a></p></blockquote><p>内网穿透。</p><p>使用场景：</p><ul><li>本地服务器外网访问</li></ul><p><img src="https://camo.githubusercontent.com/c38e5f8cf24e62a3a2482897d4653b70e7d42649549b48cea4d90e873c5480c3/68747470733a2f2f6e67726f6b2e636f6d2f7374617469632f696d672f6f766572766965772e706e67" alt="ngrok"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前端开发效率工具&quot;&gt;&lt;a href=&quot;#前端开发效率工具&quot; class=&quot;headerlink&quot; title=&quot;前端开发效率工具&quot;&gt;&lt;/a&gt;前端开发效率工具&lt;/h1&gt;&lt;p&gt;推荐几前端开发过程中常用工具。&lt;/p&gt;
&lt;h2 id=&quot;postman&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2020年终总结</title>
    <link href="https://lancezhu.github.io/2020/12/31/2020%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>https://lancezhu.github.io/2020/12/31/2020%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</id>
    <published>2020-12-31T12:53:54.000Z</published>
    <updated>2020-12-31T13:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2020年终总结"><a href="#2020年终总结" class="headerlink" title="2020年终总结"></a>2020年终总结</h1><p>一年就浑浑噩噩的过去了。</p><h2 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h2><p>相比于去年，在技术上的投入少了很多。花费的时间和学到的新知识都少了。</p><p>参与阿里巴巴编程之夏（ASoC）算是今年内值得一提的事情，将近两个月的编程之夏参与了 <a href="https://github.com/alibaba/ice" target="_blank" rel="noopener">alibaba/ice</a>。经历整个过程，也学到不少东西。一是了解了开源项目的维护和开发情况，二是借此机会较为深入使用和学习了 React 和 Webpack，三是大致感受了阿里巴巴的工作氛围（感觉比当时在字节跳动实习时工作强度高）。不过因为疫情最后结业没去杭州有些遗憾。</p><p>另一件投入比较多的一个东西是 <a href="https://github.com/miniprogram-analyzer" target="_blank" rel="noopener">miniprogram-analyzer</a>。一个针对微信小程序的代码分析平台，不过进展不太乐观，主要原因在于投入时间有些少，有些懈怠了。</p><h2 id="科研"><a href="#科研" class="headerlink" title="科研"></a>科研</h2><p>下半年，正式成为研究生了，虽然很早前就在参与实验室的项目。</p><p>虽说成了研究生，不过感觉学习上倒没有本科时投入和专注。这学期主要的科研内容主要是 <a href="https://github.com/miniprogram-analyzer" target="_blank" rel="noopener">miniprogram-analyzer</a>。因项目需要和自己想尝试新方向，学了些机器学习/深度学习。不过相比于前端，对机器学习的掌握情况还是有差距，缺少真实项目的实践。</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>减少了对技术上的时间投入，科研也比较划水，日常生活自然要悠闲些了。</p><p>游戏时间明显增多，导致看电影时间都少了，运动也是三天打鱼两天上网。</p><p>不过总算尝试了些正向的事情。年初看了些理财相关内容，年末尝试了下滑雪、游泳。</p><p>悟已往之不谏，之来者犹可追。</p><h2 id="FLAG"><a href="#FLAG" class="headerlink" title="FLAG"></a>FLAG</h2><p>总体目标：更专注和投入、勇敢些、不将就。</p><ul><li><input disabled="" type="checkbox"> 论文</li><li><input disabled="" type="checkbox"> 游泳</li><li><input disabled="" type="checkbox"> 滑板</li><li><input disabled="" type="checkbox"> 英语</li><li><input disabled="" type="checkbox"> 攒机</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2020年终总结&quot;&gt;&lt;a href=&quot;#2020年终总结&quot; class=&quot;headerlink&quot; title=&quot;2020年终总结&quot;&gt;&lt;/a&gt;2020年终总结&lt;/h1&gt;&lt;p&gt;一年就浑浑噩噩的过去了。&lt;/p&gt;
&lt;h2 id=&quot;技术&quot;&gt;&lt;a href=&quot;#技术&quot; cla
      
    
    </summary>
    
    
    
      <category term="年终总结" scheme="https://lancezhu.github.io/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>MNIST 手写数字识别实践</title>
    <link href="https://lancezhu.github.io/2020/12/17/handwriting-number-recognition-mnist/"/>
    <id>https://lancezhu.github.io/2020/12/17/handwriting-number-recognition-mnist/</id>
    <published>2020-12-17T02:34:20.000Z</published>
    <updated>2020-12-17T02:34:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MNIST-手写数字识别实践"><a href="#MNIST-手写数字识别实践" class="headerlink" title="MNIST 手写数字识别实践"></a>MNIST 手写数字识别实践</h1><h2 id="问题介绍"><a href="#问题介绍" class="headerlink" title="问题介绍"></a>问题介绍</h2><p>手写数字识别为模式识别的一个重要分支，其主要研究如何让计算机通过手写体图片识别出图片中的数字。手写数字识别可以被应用于需要大量数字识别处理的场景，如学校试卷成绩统计、银行票据统计等，应用场景广泛。同时手写数字识别由计算机自动化操作，相比于人工处理，效率更高。</p><p>机器学习及深度学习方法常用于手写数字识别任务，本文将采用多种模型完成手写数字识别10分类任务，并对不同模型进行对比分析。</p><h2 id="相关问题内容调研"><a href="#相关问题内容调研" class="headerlink" title="相关问题内容调研"></a>相关问题内容调研</h2><p>处理手写数字识别任务的模式识别算法主要包括机器学习方法如K近邻算法（K Nearest Neighbor，KNN）、支持向量机（Support Vector Machine，SVM）、贝叶斯网络和深度学习方法如深度神经网络（Deep Neural Networks，DNN）、卷积神经网络（Convolutional Neural Network，CNN）、循环神经网络（Recurrent Neural Network，RNN）等。</p><p>用于手写数字识别的数据集主要由MNIST，DBRHD和USPS。MNIST数据集常用于深度学习领域，共包括70000个带标签的手写数字样本。其中60000张为训练集，10000张为测试集。每张图像尺寸为28*28像素。DBRHD是UCI的机器学习中心提供的数字手写体数据库。训练集共有7494个，来自40位手写者；测试集共有3498个，来自14位手写者。USPS数据集是美国邮政服务手写数字识别库，共包含9282个手写数字图像，每张图像均为灰度图，尺寸为16*16像素。</p><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>本文将分别使用DNN、CNN、KNN、SVM四种方法对MNIST数据集进行手写数字识别实验。</p><ul><li><p>DNN。该模型网络结构包含一个64维的隐含层，损失函数采用交叉熵，优化器选用随机梯度下降法，激活函数为ReLU。</p></li><li><p>CNN。CNN方法包含两个模型。模型1：该模型网络结构仅包含一个卷积层，卷积核大小为3*3，包含32个通道。损失函数采用交叉熵，优化器选用随机梯度下降法，激活函数为ReLU；模型2：采用Pytorch官方示例模型，该模型增加了卷积层及全连接层，并新添池化层及Dropout策略，详见<a href="https://github.com/pytorch/examples/blob/master/mnist/main.py。" target="_blank" rel="noopener">https://github.com/pytorch/examples/blob/master/mnist/main.py。</a></p></li><li><p>KNN。KNN算法原理为通过寻找待分类样本在样本空间中K个最相似的样本，K个样本中大多数样本同属于某个类别，则该样本也属于这个类别。本次实验中K选择10。</p></li><li><p>SVM。SVM算法是一类按照监督学习方式对数据进行二元分类的广义线性分类器，目标在于寻找划分学习样本的最大边距超平面，并可通过核方法实现非线性分类。</p></li></ul><p>本次实验基本流程包括数据集的获取、预处理，模型设计及实现、模型训练及调优。</p><p>具体实验代码详见<a href="https://github.com/LanceZhu/deep-learning。" target="_blank" rel="noopener">https://github.com/LanceZhu/deep-learning。</a></p><h2 id="实验数据及设置"><a href="#实验数据及设置" class="headerlink" title="实验数据及设置"></a>实验数据及设置</h2><p>本次实验采用MNIST数据集，60000个样本作为训练集，10000个样本作为测试集。</p><p>软硬件环境：</p><p>​    操作系统：Windows 10，WSL(Windows Subsystem Linux)</p><p>​    CPU：Intel(R) Core(TM) i7-6500U</p><p>​    RAM：12GB</p><p>​    编程语言及框架：Python，Pytorch、Scikit-learn</p><h2 id="实验结果和分析"><a href="#实验结果和分析" class="headerlink" title="实验结果和分析"></a>实验结果和分析</h2><p>在划分的训练集上进行模型训练，测试集上验证模型效果。模型训练过程见图，各模型准确率见下表：</p><table><thead><tr><th><strong>模型</strong></th><th><strong>模型准确率</strong></th></tr></thead><tbody><tr><td>DNN</td><td>95%</td></tr><tr><td>CNN（1）</td><td>98%</td></tr><tr><td>CNN（2）</td><td>99%</td></tr><tr><td>KNN</td><td>90%</td></tr><tr><td>SVM</td><td>93%</td></tr></tbody></table><p>表1：各模型准确率</p><p>由表1可看出，</p><ul><li><p>几种模型准确率均大于等于90%，最高可达99%，结果较为乐观。</p></li><li><p>传统机器学习方法均劣于深度学习方法。</p></li><li><p>深度学习方法中，CNN方法优于普通DNN方法。原因在于CNN中引入了感受野、权值共享的方法减少了网络参数，缓解了网络过拟合问题，CNN的卷积操作使得其相比于DNN获得了某种程度的尺度、位移、形变不变性，具有更好的泛化和鲁棒性。</p></li></ul><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>本文使用DNN、CNN、KNN、SVM四种方法对MNIST数据集进行了手写数字识别实验。实验结果表明，各方法准确率高于90%，其中CNN模型准确率最高（99%），可认为达到了正确识别手写数字的效果。其中深度学习方法在准确率上均高于传统机器学习方法，可认为深度学习方法在手写数字识别问题上优于传统机器学习方法。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1]  陈庭轩. 基于集成卷积神经网络的手写体数字识别研究[D].华中师范大学,2020.</p><p>[2]  何帅.卷积神经网络在手写数字识别中的应用[J].电脑知识与技术,2020,16(21):13-15.</p><p>[3]  唐子清,姚俭.基于深度学习的数字识别方法研究[J].软件导刊,2020,19(09):228-232.</p><p>[4]  汤晓武.一种基于KNN算法的手写数字分类器的设计与实现[J].信息通信,2020(10):53-55.</p><p>[5]  Justin Johnson.LEARNING PYTORCH WITH EXAMPLES[EB/OL].<a href="https://pytorch.org/tutorials/beginner/pytorch_with_examples.html,2017" target="_blank" rel="noopener">https://pytorch.org/tutorials/beginner/pytorch_with_examples.html,2017</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MNIST-手写数字识别实践&quot;&gt;&lt;a href=&quot;#MNIST-手写数字识别实践&quot; class=&quot;headerlink&quot; title=&quot;MNIST 手写数字识别实践&quot;&gt;&lt;/a&gt;MNIST 手写数字识别实践&lt;/h1&gt;&lt;h2 id=&quot;问题介绍&quot;&gt;&lt;a href=&quot;#问
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>neural-networks-summary</title>
    <link href="https://lancezhu.github.io/2020/12/12/neural-networks-summary/"/>
    <id>https://lancezhu.github.io/2020/12/12/neural-networks-summary/</id>
    <published>2020-12-12T09:13:52.000Z</published>
    <updated>2020-12-12T09:13:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="神经网络总结"><a href="#神经网络总结" class="headerlink" title="神经网络总结"></a>神经网络总结</h1><p>神经网络模拟人脑神经结构，获取某种智能，以类似人类的方式解决问题。</p><p>解决的问题包括回归问题、分类问题等。研究方向主要有人脸识别，文本翻译、目标检测等。对应的应用场景为智能安防、无人驾驶、多语言翻译等。</p><h2 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h2><p>神经网络的基本结构包括输入层、隐藏层、输出层。其中输入层类似于人类大脑神经元，感知外界信息，转化为向量；隐藏层对来自于输入层的向量进行加权处理，并进行激活以增加非线性；输出层对隐藏层的信息再次整合，进行输出。</p><p>深度神经网络中常见网络结构有：</p><ul><li><p>DNN(Deep Neural Network) 最基础的深度神经网络</p></li><li><p>CNN(Convolution Neural Network) 卷积神经网络</p></li><li><p>RNN(Recurrent Neural Network) 循环神经网络</p></li><li><p>GAN(Generative Adversarial Network) 生成对抗网络</p></li><li><p>…</p></li></ul><h2 id="网络优化"><a href="#网络优化" class="headerlink" title="网络优化"></a>网络优化</h2><h3 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h3><p>归一化（均值归零），批归一化，方差归一，主成分分析，白化</p><h3 id="参数初始化"><a href="#参数初始化" class="headerlink" title="参数初始化"></a>参数初始化</h3><p>随机初始化，Xavier，MSRA初始化</p><h3 id="参数更新"><a href="#参数更新" class="headerlink" title="参数更新"></a>参数更新</h3><p>随机梯度下降，动量</p><h3 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h3><p>Sigmoid，tanh，ReLU，leakly ReLU</p><h3 id="学习率调整"><a href="#学习率调整" class="headerlink" title="学习率调整"></a>学习率调整</h3><p>固定学习率，Adagrad，Adam</p><h2 id="框架应用"><a href="#框架应用" class="headerlink" title="框架应用"></a>框架应用</h2><p><a href="http://pytorch.org/" target="_blank" rel="noopener">PyTorch</a>，<a href="https://github.com/tensorflow/tensorflow" target="_blank" rel="noopener">Tensorflow</a></p><h2 id="实践（手写数字识别）"><a href="#实践（手写数字识别）" class="headerlink" title="实践（手写数字识别）"></a>实践（手写数字识别）</h2><p>见博客『MNIST 手写数字识别实践』</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;神经网络总结&quot;&gt;&lt;a href=&quot;#神经网络总结&quot; class=&quot;headerlink&quot; title=&quot;神经网络总结&quot;&gt;&lt;/a&gt;神经网络总结&lt;/h1&gt;&lt;p&gt;神经网络模拟人脑神经结构，获取某种智能，以类似人类的方式解决问题。&lt;/p&gt;
&lt;p&gt;解决的问题包括回归问题、分
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>关于 LanceZhu</title>
    <link href="https://lancezhu.github.io/2020/11/10/about-me/"/>
    <id>https://lancezhu.github.io/2020/11/10/about-me/</id>
    <published>2020-11-10T09:16:19.000Z</published>
    <updated>2020-11-10T09:16:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h1><p>  A human being</p><p>  北邮信息与通信工程研究生在读</p><hr><p>  本日志主要记录软件开发相关的实践及可能会有的日常随想。</p><h2 id="日常"><a href="#日常" class="headerlink" title="日常"></a>日常</h2><p>  学习/运动/电影/读书</p><h2 id="软件开发"><a href="#软件开发" class="headerlink" title="软件开发"></a>软件开发</h2><h3 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h3><p>  <strong>熟悉</strong></p><ul><li>JavaScript/Node</li></ul><p>  <strong>了解</strong></p><ul><li>Python</li><li>Java</li><li>C++</li><li>Shell</li><li>SQL</li></ul><p>  <strong>使用过</strong></p><ul><li><p>PHP</p></li><li><p>Go</p></li><li><p>Verilog</p><h2 id="系统-框架-软件"><a href="#系统-框架-软件" class="headerlink" title="系统/框架/软件"></a>系统/框架/软件</h2></li></ul><p>  <strong>前端</strong></p><ul><li>微信小程序</li><li>Vue.js</li><li>React</li></ul><p>  <strong>后端</strong></p><ul><li>基于 Nodejs - Koa/Express/Egg</li><li>基于 Python - Django/Flask</li></ul><p>  <strong>其他</strong></p><ul><li><p>Linux Ubuntu/CentOS/Kali/树莓派</p></li><li><p>MySQL/MongoDB</p></li><li><p>Docker</p></li><li><p>…</p><h2 id="找到我"><a href="#找到我" class="headerlink" title="找到我"></a>找到我</h2></li><li><p>2937443168#qq.com</p></li><li><p><a href="f00bar.cn">个人网站 - f00bar.cn</a></p></li><li><p><a href="https://github.com/LanceZhu" target="_blank" rel="noopener">GitHub - LanceZhu</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;关于&quot;&gt;&lt;a href=&quot;#关于&quot; class=&quot;headerlink&quot; title=&quot;关于&quot;&gt;&lt;/a&gt;关于&lt;/h1&gt;&lt;p&gt;  A human being&lt;/p&gt;
&lt;p&gt;  北邮信息与通信工程研究生在读&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;  本日志主要记录软件开发相关的实践
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ELK-stack</title>
    <link href="https://lancezhu.github.io/2020/10/12/ELK-stack/"/>
    <id>https://lancezhu.github.io/2020/10/12/ELK-stack/</id>
    <published>2020-10-12T09:48:22.000Z</published>
    <updated>2020-10-12T09:48:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Note-ELK-Stack-Elasticsearch、Logstash、Kibana"><a href="#Note-ELK-Stack-Elasticsearch、Logstash、Kibana" class="headerlink" title="[Note] ELK Stack(Elasticsearch、Logstash、Kibana)"></a>[Note] ELK Stack(Elasticsearch、Logstash、Kibana)</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ELK Stack 由 <strong>E</strong>lasticSearch、<strong>L</strong>ogstash、<strong>K</strong>ibana 组成，分别用来处理日志的检索、收集及可视化。本文的契机是为了替代原有的正则匹配字符串的检索方式，优化全文检索的效果。下面介绍 ELK 的安装及基本使用（以 MySQL 为数据源，使用 Logstash 导入至 ElasticSearch，最终通过 Kibana 验证查询效果）</p><h2 id="基本要求"><a href="#基本要求" class="headerlink" title="基本要求"></a>基本要求</h2><p>推荐硬件配置：内存 4G</p><h2 id="ELK-Stack"><a href="#ELK-Stack" class="headerlink" title="ELK Stack"></a>ELK Stack</h2><p>以下安装适用于 Ubuntu 等 Debian 系操作系统。</p><h3 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h3><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.9/deb.html" target="_blank" rel="noopener"><strong>download</strong></a></p><p><strong>配置软件源+安装依赖</strong></p><pre><code class="hljs bash">$ wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -$ sudo apt-get install apt-transport-https$ <span class="hljs-built_in">echo</span> <span class="hljs-string">"deb https://artifacts.elastic.co/packages/7.x/apt stable main"</span> | sudo tee /etc/apt/sources.list.d/elastic-7.x.list</code></pre><p><strong>安装 Elasticsearch</strong></p><pre><code class="hljs bash">$ sudo apt-get update &amp;&amp; sudo apt-get install elasticsearch$ sudo systemctl start elasticsearch.service$ curl -X <span class="hljs-string">'GET'</span> <span class="hljs-string">'http://localhost:9200'</span> <span class="hljs-comment"># 验证安装、启动是否成功</span></code></pre><h3 id="Logstash"><a href="#Logstash" class="headerlink" title="Logstash"></a>Logstash</h3><p><a href="https://www.elastic.co/guide/en/logstash/7.9/installing-logstash.html" target="_blank" rel="noopener"><strong>download</strong></a></p><pre><code class="hljs bash">$ sudo apt-get update &amp;&amp; sudo apt-get install logstash$ <span class="hljs-built_in">cd</span> /usr/share/logstash/bin$ sudo chmod 777 -R /usr/share/logstash/data$ bash logstash -f mp-analyzer-debug-list.conf <span class="hljs-comment"># -f 选择配置文件</span></code></pre><h4 id="Mysql-输入插件"><a href="#Mysql-输入插件" class="headerlink" title="Mysql 输入插件"></a>Mysql 输入插件</h4><p>默认安装，可通过以下操作进行验证</p><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> /usr/share/logstash/bin$ bash logstash-plugin list <span class="hljs-comment"># 查看所有插件</span>$ bash logstash-plugin list | grep logstash-input-jdbc</code></pre><p><strong>jdbc(Java database connector)</strong></p><p>用于连接 MySQL</p><p><a href="https://dev.mysql.com/downloads/connector/j/" target="_blank" rel="noopener"><strong>download</strong></a></p><h4 id="Elasticsearch-输出插件"><a href="#Elasticsearch-输出插件" class="headerlink" title="Elasticsearch 输出插件"></a>Elasticsearch 输出插件</h4><p>默认安装，可通过以下操作进行验证</p><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> /usr/share/logstash/bin$ bash logstash-plugin list <span class="hljs-comment"># 查看所有插件</span>$ bash logstash-plugin list | grep logstash-output-elasticsearchlogstash-output-elasticsearch</code></pre><h4 id="kibana"><a href="#kibana" class="headerlink" title="kibana"></a>kibana</h4><p><a href="https://www.elastic.co/guide/en/kibana/7.9/deb.html" target="_blank" rel="noopener"><strong>download</strong></a></p><pre><code class="hljs bash">$ sudo apt-get update &amp;&amp; sudo apt-get install kibana$ sudo systemctl start kibana$ open http://localhost:5601 <span class="hljs-comment"># 打开浏览器查看</span></code></pre><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>MySQL 作为数据源，使用 Logstash 导入至 Elasticsearch，并通过 kibana 可视化查询，验证查询效果</p><h3 id="启动-ELK"><a href="#启动-ELK" class="headerlink" title="启动 ELK"></a>启动 ELK</h3><pre><code class="hljs bash"><span class="hljs-comment"># 直接启动 elasticsearch</span>$ sudo systemctl start elasticsearch.service<span class="hljs-comment"># 配置文件指定 MySQL、jdbc及输出格式</span>$ <span class="hljs-built_in">cd</span> /usr/share/logstash/bin$ bash logstash -f mp-analyzer-debug-list.conf <span class="hljs-comment"># -f 选择配置文件，mp-analyzer-debug-list.conf 内容见下文</span><span class="hljs-comment"># 直接启动 kibana</span>$ sudo systemctl start kibana$ open http://localhost:5601 <span class="hljs-comment"># 打开浏览器查看</span></code></pre><h3 id="配置-ELK"><a href="#配置-ELK" class="headerlink" title="配置 ELK"></a>配置 ELK</h3><h4 id="logstash"><a href="#logstash" class="headerlink" title="logstash"></a>logstash</h4><p>mp-analyzer-debug-list.conf</p><pre><code class="hljs markdown">input &#123;  jdbc &#123;<span class="hljs-code">    jdbc_driver_library =&gt; "/home/ubuntu/projects/mysql-connector-java/mysql-connector-java-8.0.21/mysql-connector-java-8.0.21.jar"</span><span class="hljs-code">    jdbc_driver_class =&gt; "com.mysql.jdbc.Driver"</span><span class="hljs-code">    jdbc_connection_string =&gt; "jdbc:mysql://your_server_ip:3306/database"</span><span class="hljs-code">    jdbc_user =&gt; "user"</span><span class="hljs-code">    jdbc_password =&gt; "password"</span><span class="hljs-code">    schedule =&gt; "* * * * *"</span><span class="hljs-code">    statement =&gt; "SELECT * FROM movies WHERE id &gt;= 0"</span><span class="hljs-code">    use_column_value =&gt; true</span><span class="hljs-code">    tracking_column_type =&gt; "numeric"</span><span class="hljs-code">    tracking_column =&gt; "id"</span><span class="hljs-code">    last_run_metadata_path =&gt; "syncpoint_table"</span>  &#125;&#125;output &#123;  elasticsearch &#123;<span class="hljs-code">    hosts =&gt; ["127.0.0.1"]</span><span class="hljs-code">    index =&gt; "debug-list"</span><span class="hljs-code">    document_id =&gt; "%&#123;id&#125;"</span>  &#125;&#125;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Note-ELK-Stack-Elasticsearch、Logstash、Kibana&quot;&gt;&lt;a href=&quot;#Note-ELK-Stack-Elasticsearch、Logstash、Kibana&quot; class=&quot;headerlink&quot; title=&quot;[Not
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>icejs-todos-server</title>
    <link href="https://lancezhu.github.io/2020/10/12/icejs-todos-server/"/>
    <id>https://lancezhu.github.io/2020/10/12/icejs-todos-server/</id>
    <published>2020-10-12T09:46:39.000Z</published>
    <updated>2020-10-12T09:46:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何同时开发小程序-中后台应用-feat-icejs-服务端篇"><a href="#如何同时开发小程序-中后台应用-feat-icejs-服务端篇" class="headerlink" title="如何同时开发小程序+中后台应用(feat: icejs) - 服务端篇"></a>如何同时开发小程序+中后台应用(feat: icejs) - 服务端篇</h1><blockquote><p>知乎：<a href="https://zhuanlan.zhihu.com/p/217932764" target="_blank" rel="noopener">使用 React + icejs 开发一个完整的 Todo 应用 - 服务端篇</a><br>语雀：<a href="https://www.yuque.com/f00bar/bsa44q/pt2tsh" target="_blank" rel="noopener">如何同时开发小程序+中后台应用(feat: icejs) - 服务端篇</a></p></blockquote><blockquote><p><a href="https://ice.work/" target="_blank" rel="noopener">icejs</a> 主要应用场景为开发中后台应用。但 <a href="mailto:icejs@1.7.0">icejs@1.7.0</a> 版本开始支持<a href="https://ice.work/docs/miniprogram/start" target="_blank" rel="noopener">小程序开发</a>。如果你想使用 React 同时开发中后台应用和小程序，那么 icejs 即可满足你。使用同一套技术体系，减少技术切换成本，提高研发效率。</p></blockquote><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>本文将演示如何使用 icejs 构建 Todo 小程序 + 后台管理系统，同时包括相应服务端。</p><p>Todo 应用的功能或需求为：</p><ul><li>小程序端：展示 Todo 列表，支持增删改查，以及同步数据到服务端。</li><li>后台管理系统：小程序用户信息和增删改查的管理系统。</li></ul><p>整体的技术栈设计如下：</p><ul><li>*<em>小程序 *</em><ul><li>icejs 框架</li><li>universal-request 数据请求</li></ul></li><li><strong>后台管理系统</strong><ul><li>icejs 框架</li><li>icejs build-plugin-ice-auth 插件，权限管理</li><li>fusion design UI 组件库</li></ul></li><li><strong>服务端</strong> + <strong>数据库</strong><ul><li>eggjs 服务端框架</li><li>egg-sequelize + mysql2 用于 eggjs 连接 MySQL 数据库</li><li>MySQL 数据库</li><li>uuid 唯一 id 生成</li></ul></li></ul><p>因篇幅较长，如何同时开发小程序+中后台应用（feat: icejs）将分为三篇分别介绍。</p><ul><li>小程序篇</li></ul><p>使用 icejs 开发 Todo 小程序。</p><ul><li>后台管理系统篇</li></ul><p>使用 icejs 开发 Todo 小程序后台管理系统。</p><ul><li>服务端篇（本文）</li></ul><p>搭建服务 Todo 小程序及后台管理系统的服务端。</p><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><blockquote><p>项目代码见 <a href="https://github.com/ice-lab/icejs-miniapp-admin/tree/master/server" target="_blank" rel="noopener">icejs-miniapp-admin/server</a><br>服务端基于 eggjs，详细文档参考<a href="https://eggjs.org/" target="_blank" rel="noopener">官网</a></p></blockquote><h3 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h3><p>首先创建文件夹用于存放服务端代码</p><pre><code class="hljs bash">$ mkdir icejs-todos/server -p &amp;&amp; <span class="hljs-built_in">cd</span> icejs-todos/server</code></pre><p>使用脚手架生成项目</p><pre><code class="hljs bash">$ npm init egg --<span class="hljs-built_in">type</span>=simple</code></pre><p>启动项目</p><pre><code class="hljs bash">$ npm install &amp;&amp; npm run dev<span class="hljs-comment"># 浏览器打开 http://localhost:7001 可看到项目正常启动</span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2070295/1598521003072-d6f23f24-2bff-4222-b240-7ef2e0559590.png#align=left&display=inline&height=1031&margin=%5Bobject%20Object%5D&originHeight=1031&originWidth=1927&status=done&style=none&width=1927" alt=""></p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>下面设计数据表结构。数据库采用 MySQL 5.7。</p><blockquote><p>可通过 <a href="https://github.com/ice-lab/icejs-miniapp-admin/tree/master/server/config/db/sql" target="_blank" rel="noopener">icejs-miniapp-admin#db/sql</a> 建库、建表、导入数据。</p></blockquote><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><p>首先连接 MySQL 数据库。</p><pre><code class="hljs bash"><span class="hljs-comment"># 以 root 用户身份登录，密码在运行命令后按照提示输入</span>$ mysql -u root -p</code></pre><p>连接到 MySQL 数据库后，在 MySQL 终端中通过以下命令，创建 icejs_todos 数据库。</p><pre><code class="hljs mysql">create database icejs_todos;</code></pre><p>通过</p><pre><code class="hljs mysql">show databases;</code></pre><p>查看所有数据库。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2070295/1598521003846-722656db-7b93-4ee0-a149-edba4e7a031b.png#align=left&display=inline&height=175&margin=%5Bobject%20Object%5D&originHeight=175&originWidth=238&status=done&style=none&width=238" alt=""></p><h4 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h4><p>创建 icejs_todos 用户并配置相应权限以管理数据。</p><pre><code class="hljs mysql">create user &#39;icejs_todos&#39;@&#39;%&#39; identified by &#39;icejs_todos&#39;;grant all privileges on icejs_todos.* to &#39;icejs_todos&#39;@&#39;%&#39;;flush privileges;</code></pre><p>在之后的数据库创建的操作中，切换为 icejs_todos 用户。</p><h4 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h4><p>本应用涉及三个实体：</p><ul><li>管理员 admin</li><li>用户 users</li><li>代办事项 todos</li></ul><p>分别对应三个表</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2070295/1598521004341-5923f3c1-b023-4816-89b9-171e0f4bc3a6.png#align=left&display=inline&height=186&margin=%5Bobject%20Object%5D&originHeight=186&originWidth=253&status=done&style=none&width=253" alt=""></p><p>admin 对应后台管理系统管理员</p><p>users 对应小程序用户</p><p>todos 对应代办事项</p><p>其中 users 与 todos 存在一对多关系，即一个用户对应多个 todo。</p><p>各表字段结构为</p><p><strong>admin</strong></p><table><thead><tr><th>字段</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>int(11)</td><td>管理员 id</td></tr><tr><td>username</td><td>varchar(63)</td><td>管理员 用户名</td></tr><tr><td>password</td><td>varchar(63)</td><td>管理员密码</td></tr></tbody></table><p><strong>users</strong></p><table><thead><tr><th>字段</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>openId</td><td>varchar(45)</td><td>用户 id，通过微信小程序认证获取</td></tr><tr><td>username</td><td>varchar(45)</td><td>用户名</td></tr></tbody></table><p><strong>todos</strong></p><table><thead><tr><th>字段</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>varchar(45)</td><td>todo id</td></tr><tr><td>content</td><td>json</td><td>todo 内容</td></tr><tr><td>openId</td><td>varchar(45)</td><td>对应 users 表中的 openId</td></tr></tbody></table><p>可通过以下命令创建数据表：</p><pre><code class="hljs jsx">use icejs_todos; -- 选择数据库CREATE TABLE <span class="hljs-string">`admin`</span> (  <span class="hljs-string">`id`</span> int(<span class="hljs-number">11</span>) NOT NULL AUTO_INCREMENT,  <span class="hljs-string">`username`</span> varchar(<span class="hljs-number">63</span>) NOT NULL DEFAULT <span class="hljs-string">''</span> COMMENT <span class="hljs-string">'管理员名称'</span>,  <span class="hljs-string">`password`</span> varchar(<span class="hljs-number">63</span>) NOT NULL DEFAULT <span class="hljs-string">''</span> COMMENT <span class="hljs-string">'管理员密码'</span>,  PRIMARY KEY (<span class="hljs-string">`id`</span>)) ENGINE=InnoDB AUTO_INCREMENT=<span class="hljs-number">2</span> DEFAULT CHARSET=utf8mb4 COMMENT=<span class="hljs-string">'管理员'</span>;CREATE TABLE <span class="hljs-string">`todos`</span> (  <span class="hljs-string">`id`</span> varchar(<span class="hljs-number">45</span>) NOT NULL,  <span class="hljs-string">`content`</span> json DEFAULT NULL COMMENT <span class="hljs-string">'TODO 内容'</span>,  <span class="hljs-string">`openId`</span> varchar(<span class="hljs-number">45</span>) NOT NULL,  PRIMARY KEY (<span class="hljs-string">`id`</span>)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT=<span class="hljs-string">'TODO 列表'</span>;CREATE TABLE <span class="hljs-string">`users`</span> (  <span class="hljs-string">`openId`</span> varchar(<span class="hljs-number">45</span>) NOT NULL COMMENT <span class="hljs-string">'微信小程序 用户 openid'</span>,  <span class="hljs-string">`username`</span> varchar(<span class="hljs-number">45</span>) DEFAULT <span class="hljs-string">''</span> COMMENT <span class="hljs-string">'用户名'</span>,  PRIMARY KEY (<span class="hljs-string">`openId`</span>)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT=<span class="hljs-string">'用户列表'</span>;</code></pre><p>可通过 desc table_name 命令查看表字段</p><pre><code class="hljs mysql">desc admin; -- 查看 admin</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2070295/1598862229820-6259535d-12bb-4865-8bc6-d0a241d484d0.png#align=left&display=inline&height=189&margin=%5Bobject%20Object%5D&name=mysql-desc.png&originHeight=189&originWidth=616&size=10780&status=done&style=none&width=616" alt="mysql-desc.png"></p><h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h4><p>添加管理员</p><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`admin`</span> <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>,<span class="hljs-string">'user'</span>,<span class="hljs-string">'password'</span>); <span class="hljs-comment">-- 管理员用户名：user 密码：password</span></code></pre><p>添加测试 Todo</p><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`todos`</span> <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'14624e16-ba83-4fac-acb0-474502d0d18d'</span>,<span class="hljs-string">'&#123;\"text\": \"Learning ES2016\", \"completed\": true&#125;'</span>,<span class="hljs-string">'1'</span>),(<span class="hljs-string">'1e7158d5-c687-4a11-9a62-755e35a88491'</span>,<span class="hljs-string">'&#123;\"text\": \"Learning 小程序\", \"completed\": false&#125;'</span>,<span class="hljs-string">'1'</span>),(<span class="hljs-string">'f111d741-294b-44a2-8200-9f9b805fd9d2'</span>,<span class="hljs-string">'&#123;\"text\": \"Learning Javascript\", \"completed\": true&#125;'</span>,<span class="hljs-string">'1'</span>);</code></pre><p>添加测试用户</p><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`users`</span> <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'1'</span>,<span class="hljs-string">'测试用户1'</span>),(<span class="hljs-string">'2'</span>,<span class="hljs-string">'测试用户2'</span>);</code></pre><h4 id="管理数据库"><a href="#管理数据库" class="headerlink" title="管理数据库"></a>管理数据库</h4><p>可通过 <a href="https://www.mysql.com/products/workbench/" target="_blank" rel="noopener">MySQL Workbench</a> 管理数据库。<br>连接数据库<br><img src="https://cdn.nlark.com/yuque/0/2020/png/2070295/1599113402608-33d8a2e8-7e48-4d36-bb9c-c5cf322bb982.png#align=left&display=inline&height=1031&margin=%5Bobject%20Object%5D&name=server5.png&originHeight=1031&originWidth=1915&size=196824&status=done&style=none&width=1915" alt="server5.png"><br>查看数据表及表内容<br><img src="https://cdn.nlark.com/yuque/0/2020/png/2070295/1599113627138-ace00ace-aacc-41c6-8289-62ba702cc76e.png#align=left&display=inline&height=1028&margin=%5Bobject%20Object%5D&name=server6.png&originHeight=1028&originWidth=1918&size=234355&status=done&style=none&width=1918" alt="server6.png"></p><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><p>通过 egg-sequelize、mysql2 连接 MySQL 数据库。</p><h4 id="安装所需依赖"><a href="#安装所需依赖" class="headerlink" title="安装所需依赖"></a>安装所需依赖</h4><pre><code class="hljs bash">$ npm install --save egg-sequelize mysql2</code></pre><h4 id="配置-egg-sequelize"><a href="#配置-egg-sequelize" class="headerlink" title="配置 egg-sequelize"></a>配置 egg-sequelize</h4><ul><li><p>首先启用 egg-sequelize 插件，即在 config/plugin.js 中配置</p><pre><code class="hljs javascript"><span class="hljs-comment">// config/plugin.js</span><span class="hljs-built_in">module</span>.exports = &#123;  <span class="hljs-comment">// had enabled by egg</span>  <span class="hljs-comment">// static: &#123;</span>  <span class="hljs-comment">//   enable: true,</span>  <span class="hljs-comment">// &#125;</span>  sequelize: &#123;    enable: <span class="hljs-literal">true</span>,    package: <span class="hljs-string">'egg-sequelize'</span>  &#125;&#125;;</code></pre></li><li><p>并在配置 egg-sequelize 以连接到 MySQL</p><pre><code class="hljs javascript"><span class="hljs-comment">// config/config.default.js</span><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-params">appInfo</span> =&gt;</span> &#123;  <span class="hljs-comment">/**</span><span class="hljs-comment">   * built-in config</span><span class="hljs-comment">   * @type &#123;Egg.EggAppConfig&#125;</span><span class="hljs-comment">   **/</span>  <span class="hljs-keyword">const</span> config = exports = &#123;&#125;;  <span class="hljs-comment">// ...</span>  <span class="hljs-comment">// 配置 sequelize</span>  config.sequelize = &#123;    dialect: <span class="hljs-string">'mysql'</span>,        <span class="hljs-comment">// 所用数据库为 MySQL</span>    host: <span class="hljs-string">'localhost'</span>,       <span class="hljs-comment">// 连接配置</span>    port: <span class="hljs-number">3306</span>,    username: <span class="hljs-string">'icejs_todos'</span>,    password: <span class="hljs-string">'icejs_todos'</span>,    database: <span class="hljs-string">'icejs_todos'</span>,    define: &#123;      freezeTableName: <span class="hljs-literal">true</span>,  <span class="hljs-comment">// 保持数据库中表名不变，避免 admin 变为 admins</span>    &#125;  &#125;  <span class="hljs-comment">// ...</span>&#125;;</code></pre></li></ul><h4 id="连接示例"><a href="#连接示例" class="headerlink" title="连接示例"></a>连接示例</h4><p>下面以查询数据库中的所有 todos 为例演示如何查询数据。即访问 <a href="http://localhost:3001/api/todos" target="_blank" rel="noopener">http://localhost:3001/api/todos</a> 路由查看所有 todos。</p><ol><li><p>为 todos 表建立 model<br>建立 app/model/todos.js 文件，实现 model Todos 与 MySQL 数据表 todos 的对应。</p><pre><code class="hljs javascript"><span class="hljs-comment">// app/model/todos.js</span><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-params">app</span> =&gt;</span> &#123;  <span class="hljs-keyword">const</span> &#123; STRING &#125; = app.Sequelize;  <span class="hljs-keyword">const</span> Todos = app.model.define(<span class="hljs-string">'todos'</span>, &#123;    id: &#123; <span class="hljs-attr">type</span>: STRING(<span class="hljs-number">45</span>), <span class="hljs-attr">primaryKey</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">allowNull</span>: <span class="hljs-literal">false</span> &#125;,    content: <span class="hljs-built_in">JSON</span>,    openId: STRING(<span class="hljs-number">45</span>),  &#125;, &#123;    timestamps: <span class="hljs-literal">false</span>,  &#125;);  <span class="hljs-keyword">return</span> Todos;&#125;;</code></pre></li><li><p>具体查询<br>建立 app/controller/admin/todos.js 文件，通过 Todos model 查询相应数据，并添加到返回体中。</p><pre><code class="hljs javascript"><span class="hljs-comment">// app/controller/admin/todos.js</span><span class="hljs-keyword">const</span> Controller = <span class="hljs-built_in">require</span>(<span class="hljs-string">'egg'</span>).Controller;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TodosController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span> </span>&#123;  <span class="hljs-keyword">async</span> list() &#123;    <span class="hljs-keyword">const</span> &#123; ctx, app &#125; = <span class="hljs-keyword">this</span>;    <span class="hljs-comment">// 查询所有 todos</span>    <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> app.model.Todos.findAndCountAll();    <span class="hljs-comment">// 添加到返回体上</span>    ctx.body = &#123;      code: <span class="hljs-number">1000</span>,      data: &#123;        total: res.count,        list: res.rows,      &#125;,    &#125;;  &#125;&#125;<span class="hljs-built_in">module</span>.exports = TodosController;</code></pre></li><li><p>添加路由 /api/todos 实现访问该路由返回所有 Todos 数据。</p><pre><code class="hljs javascript"><span class="hljs-comment">// app/router.js</span><span class="hljs-keyword">const</span> ROUTER_PREFIX = <span class="hljs-string">'/api'</span>;<span class="hljs-comment">/**</span><span class="hljs-comment"> * @param &#123;Egg.Application&#125; app - egg application</span><span class="hljs-comment"> */</span><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-params">app</span> =&gt;</span> &#123;  <span class="hljs-keyword">const</span> &#123; router, controller &#125; = app;    <span class="hljs-comment">// ...</span>  <span class="hljs-comment">// todos 路由 /api/todos</span>  router.get(<span class="hljs-string">`<span class="hljs-subst">$&#123;ROUTER_PREFIX&#125;</span>/todos`</span>, controller.admin.todos.list);&#125;;</code></pre></li><li><p>启动项目，查看效果</p></li></ol><p>启动服务端</p><pre><code class="hljs bash">$ npm run dev</code></pre><p>浏览器访问 <a href="http://localhost:7001/api/todos" target="_blank" rel="noopener">http://localhost:7001/api/todos</a> 可看到所有 Todos。<br>    <img src="https://cdn.nlark.com/yuque/0/2020/png/2070295/1598861614362-e3ba787b-bd1a-4bc3-9b4d-95fcb13c3736.png#align=left&display=inline&height=1026&margin=%5Bobject%20Object%5D&originHeight=1026&originWidth=1920&status=done&style=none&width=1920" alt=""></p><h3 id="账户管理"><a href="#账户管理" class="headerlink" title="账户管理"></a>账户管理</h3><h4 id="后台管理系统"><a href="#后台管理系统" class="headerlink" title="后台管理系统"></a>后台管理系统</h4><p>功能包括账户的登录/登出与对用户请求的权限验证。</p><p><strong>登录/登出</strong></p><p>首先添加 admin Model，实现到数据库表 admin 的映射。Controller 中可调用该 model 查询或添加管理员。</p><pre><code class="hljs javascript"><span class="hljs-comment">// app/model/admin.js</span><span class="hljs-meta">'use strict'</span>;<span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-params">app</span> =&gt;</span> &#123;  <span class="hljs-keyword">const</span> &#123; STRING, INTEGER &#125; = app.Sequelize;  <span class="hljs-keyword">const</span> Admin = app.model.define(<span class="hljs-string">'admin'</span>, &#123;    id: &#123; <span class="hljs-attr">type</span>: INTEGER, <span class="hljs-attr">primaryKey</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">allowNull</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">autoIncrement</span>: <span class="hljs-literal">true</span> &#125;,    username: STRING(<span class="hljs-number">63</span>),    password: STRING(<span class="hljs-number">63</span>),  &#125;, &#123;    timestamps: <span class="hljs-literal">false</span>,  &#125;);  <span class="hljs-keyword">return</span> Admin;&#125;;</code></pre><p>配置 session，标识用户账户状态（登录态/登出态）</p><pre><code class="hljs javascript"><span class="hljs-comment">// app/config/config.default.js</span><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-params">appInfo</span> =&gt;</span> &#123;  <span class="hljs-comment">// ...</span>    <span class="hljs-comment">// disable csrf 避免前端跨域发起 POST 请求时，请求被拦截</span>  config.security = &#123;    csrf: &#123;      enable: <span class="hljs-literal">false</span>,    &#125;,  &#125;;  <span class="hljs-comment">// session</span>  <span class="hljs-keyword">const</span> authKey = <span class="hljs-string">'icejs-todos'</span>;  config.session = &#123;    key: authKey,    maxAge: <span class="hljs-number">24</span> * <span class="hljs-number">3600</span> * <span class="hljs-number">1000</span>, <span class="hljs-comment">// 有效期 1 天</span>    httpOnly: <span class="hljs-literal">true</span>,    encrypt: <span class="hljs-literal">true</span>,            <span class="hljs-comment">// 加密</span>  &#125;;    <span class="hljs-comment">// session auth key</span>  config.authKey = authKey;    <span class="hljs-comment">// ...</span>&#125;;</code></pre><p>添加 controller 处理登录/登出逻辑</p><pre><code class="hljs javascript"><span class="hljs-comment">// app/controller/admin/auth.js</span><span class="hljs-meta">'use strict'</span>;<span class="hljs-keyword">const</span> Controller = <span class="hljs-built_in">require</span>(<span class="hljs-string">'egg'</span>).Controller;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span> </span>&#123;  <span class="hljs-keyword">async</span> login() &#123;    <span class="hljs-keyword">const</span> &#123; ctx, app &#125; = <span class="hljs-keyword">this</span>;    <span class="hljs-keyword">const</span> &#123; authKey &#125; = app.config;    <span class="hljs-keyword">const</span> formData = ctx.request.body;    <span class="hljs-keyword">const</span> &#123; name, password &#125; = formData; <span class="hljs-comment">// 获取用户名及密码</span>    <span class="hljs-comment">// 查询用户是否存在</span>    <span class="hljs-keyword">const</span> user = <span class="hljs-keyword">await</span> app.model.Admin.findAll(&#123;      where: &#123;        username: name,        password,      &#125;,    &#125;);    <span class="hljs-keyword">let</span> code = <span class="hljs-number">2000</span>;    <span class="hljs-keyword">if</span> (user.length) &#123;      code = <span class="hljs-number">1000</span>;      <span class="hljs-comment">// 通过 session 保存登录状态</span>      ctx.session.auth = authKey;    &#125;    ctx.body = &#123;      code,    &#125;;  &#125;  <span class="hljs-keyword">async</span> logout() &#123;    <span class="hljs-keyword">const</span> &#123; ctx &#125; = <span class="hljs-keyword">this</span>;    ctx.body = &#123;      code: <span class="hljs-number">1000</span>,    &#125;;    <span class="hljs-comment">// 登出后清除登录状态</span>    ctx.session.auth = <span class="hljs-literal">null</span>;  &#125;&#125;<span class="hljs-built_in">module</span>.exports = AuthController;</code></pre><p>配置路由，前端可通过 API 进行登录和登出</p><pre><code class="hljs javascript"><span class="hljs-meta">'use strict'</span>;<span class="hljs-keyword">const</span> ROUTER_PREFIX = <span class="hljs-string">'/api'</span>;<span class="hljs-comment">/**</span><span class="hljs-comment"> * @param &#123;Egg.Application&#125; app - egg application</span><span class="hljs-comment"> */</span><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-params">app</span> =&gt;</span> &#123;  <span class="hljs-keyword">const</span> &#123; router, controller &#125; = app;  <span class="hljs-comment">// ############### admin #############</span>  <span class="hljs-comment">// auth</span>  router.post(<span class="hljs-string">`<span class="hljs-subst">$&#123;ROUTER_PREFIX&#125;</span>/auth/login`</span>, controller.admin.auth.login);  router.get(<span class="hljs-string">`<span class="hljs-subst">$&#123;ROUTER_PREFIX&#125;</span>/auth/logout`</span>, controller.admin.auth.logout);    <span class="hljs-comment">// ...</span>&#125;;</code></pre><p>此时后台管理系统登录登出功能已完成。</p><p><strong>鉴权</strong></p><p>对于某些操作需要对用户进行鉴权，如添加 Todo（/api/todos/add）。<br>鉴权可通过中间件 middleware 的形式。</p><pre><code class="hljs javascript"><span class="hljs-comment">// app/middleware/auth.js</span><span class="hljs-built_in">module</span>.exports = <span class="hljs-function">(<span class="hljs-params">options = &#123;&#125;</span>) =&gt;</span> &#123;  <span class="hljs-keyword">const</span> &#123; authKey &#125; = options;  <span class="hljs-keyword">return</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">ctx, next</span>) </span>&#123;    <span class="hljs-keyword">const</span> auth = ctx.session.auth;    <span class="hljs-comment">// 根据 session 鉴权</span>    <span class="hljs-keyword">if</span> (auth === authKey) &#123;      <span class="hljs-keyword">await</span> next();    &#125; <span class="hljs-keyword">else</span> &#123;      ctx.body = &#123;        code: <span class="hljs-number">2000</span>,        msg: <span class="hljs-string">'auth fail'</span>,      &#125;;      <span class="hljs-keyword">return</span>;    &#125;  &#125;;&#125;;</code></pre><p>对需要鉴权的操作启用该中间件</p><pre><code class="hljs javascript"><span class="hljs-comment">// app/router.js</span><span class="hljs-meta">'use strict'</span>;<span class="hljs-keyword">const</span> ROUTER_PREFIX = <span class="hljs-string">'/api'</span>;<span class="hljs-comment">/**</span><span class="hljs-comment"> * @param &#123;Egg.Application&#125; app - egg application</span><span class="hljs-comment"> */</span><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-params">app</span> =&gt;</span> &#123;  <span class="hljs-keyword">const</span> &#123; router, controller, middleware &#125; = app;  <span class="hljs-keyword">const</span> authMiddleware = middleware.auth(&#123;    authKey: app.config.authKey,  &#125;);  <span class="hljs-comment">// /api/todos/add 路由启用 authMiddleware</span>  <span class="hljs-comment">// 此处未编写 controller.admin.todos.add，仅做示例说明，可自行添加。</span>  router.post(<span class="hljs-string">`<span class="hljs-subst">$&#123;ROUTER_PREFIX&#125;</span>/todos/add`</span>, authMiddleware, controller.admin.todos.add);&#125;;</code></pre><p>后台管理系统的账户管理功能已完成。<br>主要使用情形包括：</p><ul><li><p>前端发起登录请求（用户名，密码）-&gt;服务端验证用户信息-&gt;验证通过-&gt;返回登录凭证（session）</p></li><li><p>前端发起登出请求-&gt;服务端删除登录凭证（session）</p></li><li><p>前端访问需登录接口-&gt;服务端验证登录信息（session）-&gt;验证通过-&gt;返回数据</p><h4 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h4><p>小程序的登录凭证为 openId，从微信开放数据中获取。<br>具体逻辑为：</p><pre><code class="hljs javascript"><span class="hljs-comment">// app/controller/miniapp/auth.js</span><span class="hljs-meta">'use strict'</span>;<span class="hljs-keyword">const</span> Controller = <span class="hljs-built_in">require</span>(<span class="hljs-string">'egg'</span>).Controller;<span class="hljs-comment">// 获取 openId</span><span class="hljs-comment">// https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/login/auth.code2Session.html</span><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">code2Session</span>(<span class="hljs-params">ctx, &#123; appId, appSecret, code, grantType = <span class="hljs-string">'authorization_code'</span> &#125;</span>) </span>&#123;  <span class="hljs-keyword">const</span> URL = <span class="hljs-string">'https://api.weixin.qq.com/sns/jscode2session'</span>;  <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> ctx.curl(<span class="hljs-string">`<span class="hljs-subst">$&#123;URL&#125;</span>?appid=<span class="hljs-subst">$&#123;appId&#125;</span>&amp;secret=<span class="hljs-subst">$&#123;appSecret&#125;</span>&amp;js_code=<span class="hljs-subst">$&#123;code&#125;</span>&amp;grant_type=<span class="hljs-subst">$&#123;grantType&#125;</span>`</span>, &#123;    dataType: <span class="hljs-string">'json'</span>,  &#125;);  <span class="hljs-keyword">return</span> result.data;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span> </span>&#123;  <span class="hljs-keyword">async</span> login() &#123;    <span class="hljs-keyword">const</span> &#123; ctx, app &#125; = <span class="hljs-keyword">this</span>;    <span class="hljs-keyword">const</span> formData = ctx.request.body;    <span class="hljs-keyword">const</span> &#123; code &#125; = formData; <span class="hljs-comment">// code 在小程序端通过 wx.login 获取</span>    <span class="hljs-keyword">const</span> &#123; appId, appSecret &#125; = app.config.miniapp;    <span class="hljs-keyword">const</span> session = <span class="hljs-keyword">await</span> code2Session(ctx, &#123;      appId,      appSecret,      code,    &#125;);    <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">openid</span>: openId &#125; = session;    <span class="hljs-comment">// openId 保存至数据库</span>    <span class="hljs-keyword">await</span> app.model.Users.findOrCreate(&#123;      where: &#123;        openId,      &#125;,    &#125;);    ctx.body = &#123;      code: <span class="hljs-number">1000</span>,      data: &#123;        openId,      &#125;,    &#125;;  &#125;&#125;<span class="hljs-built_in">module</span>.exports = AuthController;</code></pre><p>添加路由</p><pre><code class="hljs javascript"><span class="hljs-comment">// app/router.js</span><span class="hljs-meta">'use strict'</span>;<span class="hljs-keyword">const</span> ROUTER_PREFIX = <span class="hljs-string">'/api'</span>;<span class="hljs-keyword">const</span> MINIAPP_PREFIX = <span class="hljs-string">'/mp'</span>;<span class="hljs-comment">/**</span><span class="hljs-comment"> * @param &#123;Egg.Application&#125; app - egg application</span><span class="hljs-comment"> */</span><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-params">app</span> =&gt;</span> &#123;  <span class="hljs-keyword">const</span> &#123; router, controller &#125; = app;  <span class="hljs-comment">// ############### miniapp #############</span>  <span class="hljs-comment">// auth</span>  router.post(<span class="hljs-string">`<span class="hljs-subst">$&#123;ROUTER_PREFIX&#125;</span><span class="hljs-subst">$&#123;MINIAPP_PREFIX&#125;</span>/auth/login`</span>, controller.miniapp.auth.login);    <span class="hljs-comment">// ...</span>&#125;;</code></pre><p>小程序的账户管理逻辑完成。<br>主要使用情形有：</p></li><li><p>用户发起登录请求（code wx.login 获取）-&gt; 服务端获取 openId，并返回</p></li><li><p>用户发起操作请求（携带 openId）-&gt;服务端执行操作（依据 openId）</p><h3 id="API-设计"><a href="#API-设计" class="headerlink" title="API 设计"></a>API 设计</h3></li></ul><p>分别为后台管理系统和小程序设置不同 API 路由。<br>后台管理系统 API 前缀为  <code>/api</code><br>小程序 API 前缀为 <code>/api/mp</code> </p><h4 id="API-路由列表"><a href="#API-路由列表" class="headerlink" title="API 路由列表"></a>API 路由列表</h4><ul><li>后台管理系统<ul><li><code>/api/auth/roles</code> 获取用户权限</li><li><code>/api/auth/login</code> 登录</li><li><code>/api/auth/logout</code> 登出</li><li><code>/api/users</code> 获取用户列表</li><li><code>/api/todos</code> 获取 Todo 列表</li><li><code>/api/todos/add</code> 添加 Todo</li><li><code>/api/todo/edit</code> 编辑 Todo</li><li><code>/api/todo/del/:id</code> 删除 Todo</li><li><code>/api/todo/view/:id</code> 查看 Todo</li></ul></li><li>小程序<ul><li><code>/api/mp/auth/login</code> 登录</li><li><code>/api/mp/todos</code> 获取 Todo 列表</li><li><code>/api/mp/todos/add</code> 添加 Todo</li><li><code>/api/mp/todo/edit</code> 编辑 Todo</li><li><code>/api/mp/todo/del/:id</code> 删除 Todo</li><li><code>/api/mp/todo/view/:id</code> 查看 Todo</li><li><code>/api/mp/user/edit</code> 更改用户信息</li></ul></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2070295/1598861644202-bc0e8bee-43fc-4f75-ad1b-78af4151dc98.png#align=left&display=inline&height=769&margin=%5Bobject%20Object%5D&originHeight=769&originWidth=949&status=done&style=none&width=949" alt=""></p><h4 id="API-实现"><a href="#API-实现" class="headerlink" title="API 实现"></a>API 实现</h4><p>连接数据库-连接示例小节介绍了 <code>/api/todos</code> 获取 Todo 列表的逻辑；账户管理小节介绍了 <code>/api/auth/login</code><br>、 <code>/api/auth/logout</code> 及 <code>/api/mp/auth/login</code> 的逻辑。<br>其余 API 与以上所介绍内容类似，不再详细介绍。可查看 <a href="https://github.com/ice-lab/icejs-miniapp-admin/tree/master/server/app/controller" target="_blank" rel="noopener">icejs-miniapp-admin#/controller</a></p><h3 id="前后端联调"><a href="#前后端联调" class="headerlink" title="前后端联调"></a>前后端联调</h3><p>当服务端完成后，便可使用真实后端接口替换小程序篇及后台管理系统篇开发时使用的 Mock 接口。</p><h4 id="小程序-1"><a href="#小程序-1" class="headerlink" title="小程序"></a>小程序</h4><p>以获取 Todo 列表为例</p><ul><li><p>修改 todos service</p><pre><code class="hljs javascript"><span class="hljs-comment">// src/services/todos.js</span><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">'universal-request'</span>;<span class="hljs-comment">// 替换原有 mock 接口</span><span class="hljs-keyword">const</span> URL_PREFIX = <span class="hljs-string">'http://localhost:7001/api/mp'</span>;<span class="hljs-comment">// // 此处为 mock 接口，仅包含查询固定 todos 列表。其他功能如对小程序的增删改查需要服务端</span><span class="hljs-comment">// const URL_PREFIX = 'https://easy-mock.bookset.io/mock/5f4f05642ff5d50508b3d21b/todos_mock'</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;  <span class="hljs-keyword">async</span> list (&#123; openId &#125;) &#123;    <span class="hljs-keyword">let</span> todos = [];    <span class="hljs-keyword">try</span> &#123;      <span class="hljs-keyword">const</span> URL = <span class="hljs-string">`<span class="hljs-subst">$&#123;URL_PREFIX&#125;</span>/todos?openId=<span class="hljs-subst">$&#123;openId&#125;</span>`</span>;      <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> request(&#123;        url: URL      &#125;);      todos = res.data.data.todos;    &#125; <span class="hljs-keyword">catch</span> (err) &#123;      <span class="hljs-built_in">console</span>.error(err);    &#125;    <span class="hljs-keyword">return</span> todos;  &#125;&#125;;</code></pre></li><li><p>todos 页面中调用</p><pre><code class="hljs jsx"><span class="hljs-comment">// src/pages/todos/index.jsx</span>+ <span class="hljs-keyword">import</span> todosService <span class="hljs-keyword">from</span> <span class="hljs-string">'@/services/todos'</span>; <span class="hljs-comment">// 引入 todos service</span><span class="hljs-keyword">const</span> Todos = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;  <span class="hljs-comment">// ...</span>  <span class="hljs-comment">// lifecycle function</span>  <span class="hljs-comment">// usePageShow 函数修改如下</span>  usePageShow(<span class="hljs-keyword">async</span> () =&gt; &#123;    <span class="hljs-comment">// 通过数据请求获取 Todos 数据</span>    <span class="hljs-keyword">const</span> openId = <span class="hljs-string">'1'</span>; <span class="hljs-comment">// 此处省略 openId 获取逻辑</span>    <span class="hljs-keyword">const</span> todos = <span class="hljs-keyword">await</span> todosService.list(openId);    setTodos(todos);  &#125;)  <span class="hljs-keyword">return</span> (    <span class="hljs-comment">// 渲染 todos</span>  );&#125;;</code></pre><p>Todo 的增删改查逻辑与获取 Todo 列表类似。可直接查看</p><h4 id="后台管理系统-1"><a href="#后台管理系统-1" class="headerlink" title="后台管理系统"></a>后台管理系统</h4><p>后台管理系统篇已将各接口及调用逻辑编写完整，只需编辑 build.json 将接口地址指向服务端即可</p><pre><code class="hljs json">// build.json&#123;  <span class="hljs-attr">"proxy"</span>: &#123;    <span class="hljs-attr">"/api"</span>: &#123;      <span class="hljs-attr">"enable"</span>: <span class="hljs-literal">true</span>,      <span class="hljs-attr">"target"</span>: <span class="hljs-string">"http://localhost:7001"</span>    &#125;  &#125;&#125;</code></pre><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3></li></ul><p>服务端已完成。数据存储在 MySQL 数据库中，前端应用可通过 API 接口与后端交互。</p><p>本文介绍了服务端的开发，主要包括数据库的设计及具体使用；账户系统的设计及实现；整体 API 的设计。</p><p>项目代码见 <a href="https://github.com/ice-lab/icejs-miniapp-admin/tree/master/server" target="_blank" rel="noopener">icejs-miniapp-admin/server</a>。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>到此为止，如何同时开发小程序+中后台应用（feat: icejs）内容已全部完成。</p><p>通过三篇文章</p><ul><li>小程序篇</li><li>后台管理系统篇</li><li>服务端篇</li></ul><p>进行说明。</p><p>以开发一个 Todo 小程序及后台管理系统为例，并提供相应的服务端，演示了如何使用 icejs 同时开发小程序和中后台应用。</p><p>项目代码包括：</p><ul><li>小程序 <a href="https://github.com/ice-lab/miniprogram-materials/tree/master/scaffolds/todos" target="_blank" rel="noopener">miniprogram-materials/scaffolds/todos</a></li><li>后台管理系统 <a href="https://github.com/ice-lab/icejs-miniapp-admin/tree/master/client" target="_blank" rel="noopener">icejs-miniapp-admin/client</a></li><li>服务端 <a href="https://github.com/ice-lab/icejs-miniapp-admin/tree/master/server" target="_blank" rel="noopener">icejs-miniapp-admin/server</a></li></ul><p>文章中未详细描述的内容可直接查看以上代码。也可运行上述代码查看效果。</p><p>小程序已发布，可微信搜索** icejs todos 示例** 或直接扫描下方小程序码体验。</p><blockquote><p>因微信小程序限制，个人主体无法发布备忘录性质小程序。该实例仅包含展示页面。</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/2070295/1598521000847-41b20dba-08f0-4248-be35-dc3cfaf4dc45.jpeg#align=left&display=inline&height=258&margin=%5Bobject%20Object%5D&originHeight=258&originWidth=258&status=done&style=none&width=258" alt=""></p><p>使用 icejs 开发小程序和中后台应用，使得开发者免于在不同技术栈中切换，减少学习成本和使用不同技术栈带来的切换成本，提升开发效率。</p><p>欢迎使用 icejs 开发小程序和提供反馈！</p><h2 id="推荐阅读及参考"><a href="#推荐阅读及参考" class="headerlink" title="推荐阅读及参考"></a>推荐阅读及参考</h2><ul><li><a href="https://ice.work/" target="_blank" rel="noopener">飞冰</a></li><li><a href="https://ice.work/docs/miniprogram/start" target="_blank" rel="noopener">icejs 小程序官方文档</a></li><li><a href="https://eggjs.org/" target="_blank" rel="noopener">eggjs</a></li><li><a href="https://eggjs.org/zh-cn/tutorials/sequelize.html" target="_blank" rel="noopener">eggjs sequelize 教程</a></li><li><a href="https://github.com/ice-lab/miniprogram-materials/tree/master/scaffolds/todos" target="_blank" rel="noopener">Todos 小程序代码</a></li><li><a href="https://github.com/ice-lab/icejs-miniapp-admin/client" target="_blank" rel="noopener">Todos 后台管理系统代码</a></li><li><a href="https://github.com/ice-lab/icejs-miniapp-admin/tree/master/server" target="_blank" rel="noopener">Todos 服务端代码</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;如何同时开发小程序-中后台应用-feat-icejs-服务端篇&quot;&gt;&lt;a href=&quot;#如何同时开发小程序-中后台应用-feat-icejs-服务端篇&quot; class=&quot;headerlink&quot; title=&quot;如何同时开发小程序+中后台应用(feat: icejs) -
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>icejs-todos-management</title>
    <link href="https://lancezhu.github.io/2020/10/12/icejs-todos-management/"/>
    <id>https://lancezhu.github.io/2020/10/12/icejs-todos-management/</id>
    <published>2020-10-12T09:46:07.000Z</published>
    <updated>2020-10-12T09:46:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何同时开发小程序-中后台应用-feat-icejs-后台管理系统篇"><a href="#如何同时开发小程序-中后台应用-feat-icejs-后台管理系统篇" class="headerlink" title="如何同时开发小程序+中后台应用(feat: icejs) - 后台管理系统篇"></a>如何同时开发小程序+中后台应用(feat: icejs) - 后台管理系统篇</h1><blockquote><p>知乎：<a href="https://zhuanlan.zhihu.com/p/217929230" target="_blank" rel="noopener">使用 React + icejs 开发一个完整的 Todo 应用 - 后台系统篇</a><br>语雀：<a href="https://www.yuque.com/f00bar/bsa44q/qov20h" target="_blank" rel="noopener">如何同时开发小程序+中后台应用(feat: icejs) - 后台管理系统篇</a></p></blockquote><blockquote><p><a href="https://ice.work/" target="_blank" rel="noopener">icejs</a> 主要应用场景为开发中后台应用。但 <a href="mailto:icejs@1.7.0">icejs@1.7.0</a> 版本开始支持<a href="https://ice.work/docs/miniprogram/start" target="_blank" rel="noopener">小程序开发</a> 。如果你想使用 React 同时开发中后台应用和小程序，那么 icejs 即可满足你。使用同一套技术体系，减少技术切换成本，提高研发效率。</p></blockquote><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>本文将演示如何使用 icejs 构建 Todo 小程序 + 后台管理系统，同时包括相应服务端。</p><p>Todo 应用的功能或需求为：</p><ul><li>小程序端：展示 Todo 列表，支持增删改查，以及同步数据到服务端。</li><li>后台管理系统：小程序用户信息和增删改查的管理系统。</li></ul><p>整体的技术栈设计如下：</p><ul><li>*<em>小程序 *</em><ul><li>icejs 框架</li><li>universal-request 数据请求</li></ul></li><li><strong>后台管理系统</strong><ul><li>icejs 框架</li><li>icejs build-plugin-ice-auth 插件，权限管理</li><li>fusion design UI 组件库</li></ul></li><li><strong>服务端</strong> + <strong>数据库</strong><ul><li>eggjs 服务端框架</li><li>egg-sequelize + mysql2 用于 eggjs 连接 MySQL 数据库</li><li>MySQL 数据库</li><li>uuid 唯一 id 生成</li></ul></li></ul><p>因篇幅较长，如何同时开发小程序+中后台应用（feat: icejs）将分为三篇分别介绍。</p><ul><li>小程序篇</li></ul><p>使用 icejs 开发 Todo 小程序。</p><ul><li>后台管理系统篇（本文）</li></ul><p>使用 icejs 开发 Todo 小程序后台管理系统。</p><ul><li>服务端篇</li></ul><p>搭建服务 Todo 小程序及后台管理系统的服务端。</p><h2 id="后台管理系统"><a href="#后台管理系统" class="headerlink" title="后台管理系统"></a>后台管理系统</h2><blockquote><p>项目代码见 <a href="https://github.com/ice-lab/icejs-miniapp-admin/tree/master/client" target="_blank" rel="noopener">icejs-miniapp-admin/client</a><br>后台管理系统基于 <a href="https://ice.work/docs/guide/about" target="_blank" rel="noopener">icejs</a></p></blockquote><p>后台管理系统实现对小程序内容的管理。</p><p>具体功能包括：</p><ul><li>账户登录/登出</li><li>用户列表查看、查看某个用户所有代办事项（Todo）</li><li>代办事项列表查看、增删改查</li></ul><h3 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h3><h4 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h4><p>创建文件夹存放后台管理系统代码</p><pre><code class="hljs bash">$ mkdir icejs-todos/client -p &amp;&amp; <span class="hljs-built_in">cd</span> icejs-todos/client</code></pre><p>基于 React 模板 <a href="https://ice.work/scaffold" target="_blank" rel="noopener">Fusion Design Pro - JS</a> 创建项目</p><blockquote><p>后台管理系统绝大部分内容基于该模板，可先尝试熟悉该模板。</p></blockquote><pre><code class="hljs bash">$ npm init ice . @alifd/fusion-design-pro-js <span class="hljs-comment"># 当前目录初始化项目</span></code></pre><p>启动项目</p><pre><code class="hljs bash">$ npm install &amp;&amp; npm run start<span class="hljs-comment"># 打开浏览器 http://localhost:3333 可看到项目正常启动</span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2070295/1598520996962-f9a09e46-d343-4862-b277-51cd5be73f17.png#align=left&display=inline&height=900&margin=%5Bobject%20Object%5D&originHeight=900&originWidth=1890&status=done&style=none&width=1890" alt=""></p><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><pre><code class="hljs markdown">.├── .ice                                // icejs 运行时临时目录├── public│   ├── favicon.png                     // favicon│   └── index.html                      // 应用入口├── src                                 // 源码目录│   ├── components                      // 全局组件│   │   ├── LocaleProvider              // 多语言│   │   │   └── index.jsx│   │   └── PageHeader                  // 页首│   │       ├── index.jsx│   │       └── index.module.scss│   ├── layouts                         // 布局组件│   │   ├── BasicLayout                 // 基本布局│   │   │   ├── components│   │   │   ├── index.jsx│   │   │   └── menuConfig.js           // 侧边栏配置│   │   └── UserLayout                  // 登录/注册页布局│   │       ├── index.jsx│   │       └── index.module.scss│   ├── locales                         // 多语言│   │   ├── en-US│   │   │   └── index.js│   │   └── zh-CN│   │       └── index.js│   ├── models                          // 全局状态│   │   └── user.js│   ├── pages                           // 页面组件 包含较多页面，此处省略│   ├── utils                           // 工具函数│   │   └── locale.js│   ├── app.jsx                         // 应用入口│   ├── global.scss                     // 全局样式│   └── routes.js                       // 路由配置├── .editorconfig├── .eslintignore├── .eslintrc.js├── .gitignore├── .prettierignore├── .prettierrc.js├── .stylelintignore├── .stylelintrc.js├── README.md                            // README├── build.json                           // icejs 工程配置├── jsconfig.json├── package-lock.json├── package.json├── screenshot.png└── tsconfig.json</code></pre><h3 id="页面编写"><a href="#页面编写" class="headerlink" title="页面编写"></a>页面编写</h3><p>根据 Todo 应用需求对 Fusion Design Pro - JS 模板加以修改，编写相应页面，通过 API 接口与服务端交互。</p><p>调整目录结构：</p><ul><li>删除 src/pages 未使用页面</li><li>添加用户管理页和代办事项页（基于 src/pages/FusionDialogTable）</li><li>修改基本页面布局组件 src/layouts/BasicLayout</li><li>添加数据请求文件夹 src/services</li></ul><p>调整后的页面主要包括：</p><ul><li>登录页 src/pages/Login</li></ul><p>该页用于账户登录</p><ul><li>首页 src/pages/Home</li></ul><p>该页用于介绍后台管理系统</p><ul><li>用户管理页：src/pages/Users<br>该页面实现用户的展示及查看用户所创建的 Todo。</li><li>代办事项页：src/pages/Todos<br>该页面提供对于 Todo 的增删改查操作。</li></ul><p>调整后的目录结构如下：</p><pre><code class="hljs diff">  .  ├── .ice  ├── public  │   ├── favicon.png  │   └── index.html  ├── src  │   ├── components  │   │   ├── LocaleProvider  │   │   └── PageHeader  │   ├── layouts  │   │   ├── BasicLayout  │   │   └── UserLayout  │   ├── locales  │   │   ├── en-US  │   │   └── zh-CN  │   ├── models  │   │   └── user.js  │   ├── pages                  // 移除无用页面，只保留 Home Login Register  │   │   ├── Home  │   │   ├── Login  │   │   ├── Register<span class="hljs-addition">+ │   │   ├── Todos              // 代办事项页</span><span class="hljs-addition">+ │   │   └── Users              // 用户页</span><span class="hljs-addition">+ │   ├── services               // 数据请求</span><span class="hljs-addition">+ │   │   ├── auth.js            // 登录登出</span><span class="hljs-addition">+ │   │   ├── todos.js           // 代码事项</span><span class="hljs-addition">+ │   │   └── users.js           // 用户</span>  │   ├── utils  │   │   └── locale.js  │   ├── app.jsx  │   ├── global.scss  │   └── routes.js  ├── .editorconfig  ├── .eslintcache  ├── .eslintignore  ├── .eslintrc.js  ├── .prettierignore  ├── .prettierrc.js  ├── .stylelintignore  ├── .stylelintrc.js  ├── README.md  ├── build.json  ├── jsconfig.json  ├── package-lock.json  ├── package.json  └── tsconfig.json</code></pre><p>UI 主要基于 Fusion Design Pro - JS 模板修改。故不在进行具体介绍。可直接查看项目代码。<br>可将 Todos、Users、Home 页从此处复制到本项目中，完成页面编写。</p><p>页面编写完成后，可配置对应路由和配置侧边栏</p><h4 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h4><pre><code class="hljs javascript"><span class="hljs-comment">// route.js</span><span class="hljs-comment">// 引入路由组件</span><span class="hljs-keyword">import</span> UserLayout <span class="hljs-keyword">from</span> <span class="hljs-string">'@/layouts/UserLayout'</span>;<span class="hljs-keyword">import</span> Login <span class="hljs-keyword">from</span> <span class="hljs-string">'@/pages/Login'</span>;<span class="hljs-keyword">import</span> BasicLayout <span class="hljs-keyword">from</span> <span class="hljs-string">'@/layouts/BasicLayout'</span>;<span class="hljs-keyword">import</span> Home <span class="hljs-keyword">from</span> <span class="hljs-string">'@/pages/Home'</span>;<span class="hljs-keyword">import</span> Users <span class="hljs-keyword">from</span> <span class="hljs-string">'@/pages/Users'</span>;<span class="hljs-keyword">import</span> Todos <span class="hljs-keyword">from</span> <span class="hljs-string">'@/pages/Todos'</span>;<span class="hljs-keyword">const</span> routerConfig = [  &#123;    path: <span class="hljs-string">'/user'</span>,         <span class="hljs-comment">// 配置路由</span>    component: UserLayout, <span class="hljs-comment">// 配置路由对应组件</span>    children: [            <span class="hljs-comment">// 配置子路由</span>      &#123;        path: <span class="hljs-string">'/login'</span>,        component: Login,      &#125;,      &#123;        path: <span class="hljs-string">'/'</span>,        redirect: <span class="hljs-string">'/user/login'</span>,      &#125;,    ],  &#125;,  &#123;    path: <span class="hljs-string">'/'</span>,    component: BasicLayout,    children: [      &#123;        path: <span class="hljs-string">'/home'</span>,        component: Home,      &#125;,      &#123;        path: <span class="hljs-string">'/users/:openId'</span>,        component: Todos,      &#125;,      &#123;        path: <span class="hljs-string">'/users'</span>,        component: Users      &#125;,      &#123;        path: <span class="hljs-string">'/todos'</span>,        component: Todos      &#125;,      &#123;        path: <span class="hljs-string">'/'</span>,        redirect: <span class="hljs-string">'/home'</span>,      &#125;,    ],  &#125;,];<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> routerConfig;</code></pre><h4 id="侧边栏配置"><a href="#侧边栏配置" class="headerlink" title="侧边栏配置"></a>侧边栏配置</h4><p>侧边栏通过 menuConfig.js 进行配置</p><pre><code class="hljs javascript"><span class="hljs-comment">// src/layouts/BasicLayout/menuConfig.js</span><span class="hljs-keyword">const</span> headerMenuConfig = [];<span class="hljs-comment">// 侧边栏配置</span><span class="hljs-keyword">const</span> asideMenuConfig = [  &#123;    name: <span class="hljs-string">'首页'</span>,    path: <span class="hljs-string">'/home'</span>,    icon: <span class="hljs-string">'chart-pie'</span>  &#125;,  &#123;    name: <span class="hljs-string">'代办事项'</span>,    path: <span class="hljs-string">'/todos'</span>,    icon: <span class="hljs-string">'calendar'</span>  &#125;,  &#123;    name: <span class="hljs-string">'用户列表'</span>,    path: <span class="hljs-string">'/users'</span>,    icon: <span class="hljs-string">'account'</span>  &#125;];<span class="hljs-keyword">export</span> &#123; headerMenuConfig, asideMenuConfig &#125;;</code></pre><p>到现在为止，页面编写已完成。此时还不能查看页面效果。各页面中有调用数据请求服务，下面需要添加数据请求。</p><h3 id="数据请求"><a href="#数据请求" class="headerlink" title="数据请求"></a>数据请求</h3><p>数据请求直接采用 icejs 中的<a href="https://ice.work/docs/guide/basic/request" target="_blank" rel="noopener">数据请求方案</a>。用户只需从 ice 中导出 request 模块即可发起数据请求。<br>即：</p><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; request &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'ice'</span>; <span class="hljs-comment">// 引入数据请求库</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;  <span class="hljs-comment">// 发起 GET 请求</span><span class="hljs-keyword">async</span> list () &#123;  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> request.get(<span class="hljs-string">'/todos'</span>);    <span class="hljs-keyword">return</span> res;  &#125;,  <span class="hljs-comment">// 发起 POST 请求</span>  <span class="hljs-keyword">async</span> del (id) &#123;  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> request.post(<span class="hljs-string">'/todos/del'</span>, &#123;      id    &#125;)    <span class="hljs-keyword">return</span> res;  &#125;&#125;</code></pre><h4 id="service-编写"><a href="#service-编写" class="headerlink" title="service 编写"></a>service 编写</h4><p>本项目中的数据请求主要包括</p><ul><li>账户登录、登出</li><li>用户列表展示</li><li>Todo 列表展示及增删改查</li></ul><p>具体的逻辑在 src/services 中。</p><pre><code class="hljs markdown">src/services├── auth.js   // 账户登录登出├── todos.js  // Todo 列表查询及增删改查└── users.js  // 用户列表查询</code></pre><p>auth 包括获取用户角色，登录，登出</p><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; request &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'ice'</span>;<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;  <span class="hljs-comment">// 获取用户角色</span>  <span class="hljs-keyword">async</span> getRoles () &#123;    <span class="hljs-keyword">let</span> roles = [];    <span class="hljs-keyword">try</span> &#123;      <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> request.get(<span class="hljs-string">'/auth/roles'</span>);      roles = res.data.roles;    &#125; <span class="hljs-keyword">catch</span> (err) &#123;      <span class="hljs-built_in">console</span>.error(err);    &#125;    <span class="hljs-keyword">return</span> roles;  &#125;,  <span class="hljs-comment">// 登录</span>  <span class="hljs-keyword">async</span> login (data) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> request.post(<span class="hljs-string">'/auth/login'</span>, data)  &#125;,  <span class="hljs-comment">// 登出</span>  <span class="hljs-keyword">async</span> logout () &#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> request.get(<span class="hljs-string">'/auth/logout'</span>);  &#125;&#125;</code></pre><p>users 包括用户列表的获取</p><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; request &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'ice'</span>;<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;  <span class="hljs-comment">// 获取用户列表，支持分页查询</span>  <span class="hljs-keyword">async</span> list(&#123; current, pageSize &#125;) &#123;    <span class="hljs-keyword">let</span> data = &#123;&#125;;    <span class="hljs-keyword">try</span> &#123;      <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> request.get(<span class="hljs-string">`/users?current=<span class="hljs-subst">$&#123;current&#125;</span>&amp;size=<span class="hljs-subst">$&#123;pageSize&#125;</span>`</span>);      data = res.data;    &#125; <span class="hljs-keyword">catch</span> (err) &#123;      <span class="hljs-built_in">console</span>.error(err);    &#125;    <span class="hljs-keyword">return</span> data;  &#125;&#125;</code></pre><p>todos 包括查询 Todo 列表，及对 Todo 的增删改查</p><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; request &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'ice'</span>;<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;  <span class="hljs-comment">// 根据分页数据及用户 id 查询 Todo 列表</span>  <span class="hljs-keyword">async</span> list (&#123; current, pageSize, openId &#125;) &#123;    <span class="hljs-keyword">let</span> data = &#123;&#125;;    <span class="hljs-keyword">try</span> &#123;      <span class="hljs-keyword">let</span> URL = <span class="hljs-string">`/todos?current=<span class="hljs-subst">$&#123;current&#125;</span>&amp;size=<span class="hljs-subst">$&#123;pageSize&#125;</span>`</span>      <span class="hljs-keyword">if</span> (openId) &#123;        URL = <span class="hljs-string">`<span class="hljs-subst">$&#123;URL&#125;</span>&amp;openId=<span class="hljs-subst">$&#123;openId&#125;</span>`</span>      &#125;      <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> request.get(URL);      data = res.data;    &#125; <span class="hljs-keyword">catch</span> (err) &#123;      <span class="hljs-built_in">console</span>.error(err);    &#125;    <span class="hljs-keyword">return</span> data;  &#125;,  <span class="hljs-comment">// 为用户添加 Todo</span>  <span class="hljs-keyword">async</span> add (&#123; content, openId &#125;) &#123;    <span class="hljs-keyword">let</span> data = &#123;&#125;;    <span class="hljs-keyword">try</span> &#123;      <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> request.post(<span class="hljs-string">'/todos/add'</span>, &#123;        openId,        content      &#125;)      data = res.data;    &#125; <span class="hljs-keyword">catch</span> (err) &#123;      <span class="hljs-built_in">console</span>.error(err);    &#125;    <span class="hljs-keyword">return</span> data;  &#125;,  <span class="hljs-comment">// 根据 id 删除 Todo</span>  <span class="hljs-keyword">async</span> del (id) &#123;    <span class="hljs-keyword">let</span> data = &#123;&#125;;    <span class="hljs-keyword">try</span> &#123;      <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> request.get(<span class="hljs-string">`/todos/del/<span class="hljs-subst">$&#123;id&#125;</span>`</span>)      data = res.data;    &#125; <span class="hljs-keyword">catch</span> (err) &#123;      <span class="hljs-built_in">console</span>.error(err);    &#125;    <span class="hljs-keyword">return</span> data;  &#125;,  <span class="hljs-comment">// 编辑 Todo</span>  <span class="hljs-keyword">async</span> edit (id, &#123; openId, content &#125;) &#123;    <span class="hljs-keyword">let</span> data = &#123;&#125;;    <span class="hljs-keyword">try</span> &#123;      <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> request.post(<span class="hljs-string">'/todos/edit'</span>, &#123;        id,        openId,        content      &#125;)      data = res.data;    &#125; <span class="hljs-keyword">catch</span> (err) &#123;      <span class="hljs-built_in">console</span>.error(err);    &#125;    <span class="hljs-keyword">return</span> data;  &#125;,  <span class="hljs-comment">// 查看 Todo</span>  <span class="hljs-keyword">async</span> view (id) &#123;    <span class="hljs-keyword">let</span> data = &#123;&#125;;    <span class="hljs-keyword">try</span> &#123;      <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> request.get(<span class="hljs-string">`/todos/view/<span class="hljs-subst">$&#123;id&#125;</span>`</span>)      data = res.data;    &#125; <span class="hljs-keyword">catch</span> (err) &#123;      <span class="hljs-built_in">console</span>.error(err);    &#125;    <span class="hljs-keyword">return</span> data;  &#125;,&#125;</code></pre><p>可对 request 请求进行全局配置，使各请求均以 /api 开头。编辑 src/app.jsx</p><pre><code class="hljs jsx"><span class="hljs-comment">// src/app.jsx</span><span class="hljs-keyword">const</span> appConfig = &#123;  app: &#123;    rootId: <span class="hljs-string">'ice-container'</span>,    addProvider: <span class="hljs-function">(<span class="hljs-params">&#123; children &#125;</span>) =&gt;</span> &lt;LocaleProvider locale=&#123;locale&#125;&gt;&#123;children&#125;&lt;<span class="hljs-regexp">/LocaleProvider&gt;,</span><span class="hljs-regexp">  &#125;,</span><span class="hljs-regexp">  /</span><span class="hljs-regexp">/ 配置 request</span><span class="hljs-regexp">  request: &#123;</span><span class="hljs-regexp">    baseURL: '/</span>api<span class="hljs-string">'</span><span class="hljs-string">  &#125;</span><span class="hljs-string">&#125;;</span></code></pre><p>此时运行项目查看效果</p><pre><code class="hljs bash">$ npm run start</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2070295/1599104099586-e35c0a8b-7384-4deb-9dad-6c867635a0e4.png#align=left&display=inline&height=2079&margin=%5Bobject%20Object%5D&name=icejs8.png&originHeight=2079&originWidth=3874&size=450837&status=done&style=none&width=3874" alt="icejs8.png"></p><h4 id="Mock-数据"><a href="#Mock-数据" class="headerlink" title="Mock 数据"></a>Mock 数据</h4><p>此时数据均为空，service 发起的请求均为 404 not found。因具体的数据需要服务端支持，暂时可通过 mock 数据查看效果。<br>编辑 build.json 使得 request 指向 mock 服务 <a href="https://easy-mock.bookset.io/mock/5f4f05642ff5d50508b3d21b/todos_mock" target="_blank" rel="noopener">https://easy-mock.bookset.io/mock/5f4f05642ff5d50508b3d21b/todos_mock</a></p><blockquote><p>该 mock 服务只提供 Todo 及用户列表查询，Todo 增删改查无效。</p></blockquote><pre><code class="hljs json">// build.json&#123;<span class="hljs-attr">"proxy"</span>: &#123;    <span class="hljs-attr">"/api"</span>: &#123;      <span class="hljs-attr">"enable"</span>: <span class="hljs-literal">true</span>,      <span class="hljs-attr">"target"</span>: <span class="hljs-string">"https://easy-mock.bookset.io/mock/5f4f05642ff5d50508b3d21b/todos_mock"</span>    &#125;  &#125;&#125;</code></pre><p>查看效果<br><img src="https://cdn.nlark.com/yuque/0/2020/png/2070295/1599104513719-ac84fda3-8b1f-4c5d-8f84-3b59e52cd94f.png#align=left&display=inline&height=1984&margin=%5Bobject%20Object%5D&name=icejs11.png&originHeight=1984&originWidth=1920&size=171944&status=done&style=none&width=1920" alt="icejs11.png"></p><h3 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h3><p>只有登录用户才能访问用户管理页和 Todo 页，未登录用户应重定向到登录页。要实现该逻辑，需要对各页面设置权限。</p><p>权限管理主要通过 icejs 插件 <a href="https://ice.work/docs/guide/advance/auth" target="_blank" rel="noopener">build-plugin-ice-auth</a> 实现。</p><p>需要安装该插件</p><pre><code class="hljs bash">$ npm install build-plugin-ice-auth --save-dev</code></pre><p>并配置</p><pre><code class="hljs json">// build.json&#123;  <span class="hljs-attr">"plugins"</span>: [    <span class="hljs-string">"build-plugin-ice-auth"</span>  ]&#125;</code></pre><h4 id="项目逻辑"><a href="#项目逻辑" class="headerlink" title="项目逻辑"></a>项目逻辑</h4><p>在本项目中权限管理的逻辑主要包括：</p><ol><li><p><a href="https://github.com/ice-lab/miniapp-admin/blob/master/client/src/app.jsx#L12" target="_blank" rel="noopener">页面加载时从服务端获取权限数据</a></p><pre><code class="hljs jsx"><span class="hljs-comment">// app.jsx</span><span class="hljs-keyword">import</span> authService <span class="hljs-keyword">from</span> <span class="hljs-string">'@/services/auth'</span>;<span class="hljs-keyword">const</span> appConfig = &#123;  app: &#123;    <span class="hljs-comment">// 页面初始化时获取权限数据</span>    getInitialData: <span class="hljs-keyword">async</span> () =&gt; &#123;      <span class="hljs-keyword">const</span> roles = <span class="hljs-keyword">await</span> authService.getRoles();      <span class="hljs-keyword">return</span> &#123;        auth: &#123;          roles        &#125;      &#125;    &#125;    <span class="hljs-comment">// ...</span>  &#125;&#125;;</code></pre></li><li><p>创建<a href="https://github.com/ice-lab/miniapp-admin/blob/master/client/src/components/Auth/index.jsx" target="_blank" rel="noopener">权限管理组件</a>，并<a href="https://github.com/ice-lab/miniapp-admin/blob/master/client/src/layouts/BasicLayout/index.jsx#L92" target="_blank" rel="noopener">管理相应页面</a><br>权限管理组件 src/components/Auth</p><pre><code class="hljs jsx"><span class="hljs-comment">// src/components/Auth/index.jsx</span><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;<span class="hljs-keyword">import</span> &#123; useAuth, Redirect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'ice'</span>;<span class="hljs-keyword">const</span> WrapperPage = <span class="hljs-function">(<span class="hljs-params">PageComponent</span>) =&gt;</span> &#123;  <span class="hljs-keyword">const</span> WrappedPage = <span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> &#123;    <span class="hljs-keyword">const</span> [auth] = useAuth();    <span class="hljs-comment">// 页面鉴权 根据权限进行页面跳转</span>    <span class="hljs-keyword">const</span> needAuth = !auth.roles.includes(<span class="hljs-string">'user'</span>);    <span class="hljs-keyword">return</span> (      needAuth ? &lt;Redirect to="/user/login" /&gt; : &lt;PageComponent &#123;...props&#125; /&gt;    )  &#125;;  return WrappedPage;&#125;;export default WrapperPage;</code></pre></li><li><p>使用 Auth 组件管理 BasicLayout</p><pre><code class="hljs jsx"><span class="hljs-comment">// src/layouts/BasicLayout/index.jsx</span><span class="hljs-keyword">import</span> Auth <span class="hljs-keyword">from</span> <span class="hljs-string">'@/components/Auth'</span>;<span class="hljs-comment">// 具体布局组件</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">BasicLayout</span>(<span class="hljs-params"></span>)</span>&#123;  <span class="hljs-keyword">return</span> (    <span class="hljs-comment">// ... 省略逻辑</span>  )&#125;<span class="hljs-comment">// 使用 Auth 组件包装 BasicLayout</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Auth(BasicLayout)</code></pre></li><li><p>添加登录/登出逻辑</p></li></ol><p>从<a href="https://github.com/ice-lab/icejs-miniapp-admin/client" target="_blank" rel="noopener">后台管理系统代码</a>中复制相应页面<br>替换 src/pages/Login：接入登录接口<br>替换 src/layouts/BasicLayout：接入登出接口，更改UI</p><ol start="5"><li>运行项目查看效果</li></ol><ul><li>访问 <a href="http://localhost:3333/#/user/login" target="_blank" rel="noopener">http://localhost:3333</a> 跳转至 <a href="http://localhost:3333/#/user/login" target="_blank" rel="noopener">http://localhost:3333/#/user/login</a></li><li>登录-&gt;首页</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2070295/1599106556546-bd8421c8-8900-4934-8c4a-0f39bb83da70.png#align=left&display=inline&height=2079&margin=%5Bobject%20Object%5D&name=icejs15.png&originHeight=2079&originWidth=1917&size=257208&status=done&style=none&width=1917" alt="icejs15.png"></p><ul><li>登出-&gt;登录页</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2070295/1599106580084-e23119f8-0f77-49b1-956a-803061c6abec.png#align=left&display=inline&height=2079&margin=%5Bobject%20Object%5D&name=icejs16.png&originHeight=2079&originWidth=1918&size=265517&status=done&style=none&width=1918" alt="icejs16.png"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>本文介绍了后台管理系统的搭建。内容主要包括页面权限管理方案的实现，渲染通过数据请求获取到的数据。</p><p>Todo 的增删改查功能需要搭配服务端使用，该部分内容详见服务端篇。</p><p>后台管理系统代码见 <a href="https://github.com/ice-lab/icejs-miniapp-admin/client" target="_blank" rel="noopener">icejs-miniapp-admin/client</a>，可结合服务端 <a href="https://github.com/ice-lab/icejs-miniapp-admin/tree/master/server" target="_blank" rel="noopener">icejs-miniapp-admin/server</a> 一起运行查看效果。</p><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><ul><li><a href="https://ice.work/" target="_blank" rel="noopener">飞冰</a></li><li><a href="https://ice.work/docs/miniprogram/start" target="_blank" rel="noopener">icejs 小程序官方文档</a></li><li><a href="https://github.com/ice-lab/miniprogram-materials/tree/master/scaffolds/todos" target="_blank" rel="noopener">Todos 小程序代码</a></li><li><a href="https://github.com/ice-lab/icejs-miniapp-admin/tree/master/client" target="_blank" rel="noopener">Todos 后台管理系统代码</a></li><li><a href="https://github.com/ice-lab/icejs-miniapp-admin/tree/master/server" target="_blank" rel="noopener">Todos 服务端代码</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;如何同时开发小程序-中后台应用-feat-icejs-后台管理系统篇&quot;&gt;&lt;a href=&quot;#如何同时开发小程序-中后台应用-feat-icejs-后台管理系统篇&quot; class=&quot;headerlink&quot; title=&quot;如何同时开发小程序+中后台应用(feat: ic
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>icejs-todos-miniprogram</title>
    <link href="https://lancezhu.github.io/2020/10/12/icejs-todos-miniprogram/"/>
    <id>https://lancezhu.github.io/2020/10/12/icejs-todos-miniprogram/</id>
    <published>2020-10-12T09:45:11.000Z</published>
    <updated>2020-10-12T09:45:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何同时开发小程序-中后台应用-feat-icejs-小程序篇"><a href="#如何同时开发小程序-中后台应用-feat-icejs-小程序篇" class="headerlink" title="如何同时开发小程序+中后台应用(feat: icejs) - 小程序篇"></a>如何同时开发小程序+中后台应用(feat: icejs) - 小程序篇</h1><blockquote><p>知乎：<a href="https://zhuanlan.zhihu.com/p/216507810" target="_blank" rel="noopener">使用 React + icejs 开发一个完整的 Todo 应用 - 小程序篇</a><br>语雀：<a href="https://www.yuque.com/f00bar/bsa44q/gfw19c" target="_blank" rel="noopener">如何同时开发小程序+中后台应用(feat: icejs) - 小程序篇</a></p></blockquote><blockquote><p><a href="https://ice.work/" target="_blank" rel="noopener">icejs</a> 主要应用场景为开发中后台应用。但 <a href="mailto:icejs@1.7.0">icejs@1.7.0</a> 版本开始支持<a href="https://ice.work/docs/miniprogram/start" target="_blank" rel="noopener">小程序开发</a>。如果你想使用 React 同时开发中后台应用和小程序，那么 icejs 即可满足你。使用同一套技术体系，减少技术切换成本，提高研发效率。</p></blockquote><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>本文将演示如何使用 icejs 构建 Todo 小程序 + 后台管理系统，同时包括相应服务端。</p><p>Todo 应用的功能或需求为：</p><ul><li>小程序端：展示 Todo 列表，支持增删改查，以及同步数据到服务端。</li><li>后台管理系统：小程序用户信息和增删改查的管理系统。</li></ul><p>整体的技术栈设计如下：</p><ul><li>*<em>小程序 *</em><ul><li>icejs 框架</li><li>universal-request 数据请求</li></ul></li><li><strong>后台管理系统</strong><ul><li>icejs 框架</li><li>icejs build-plugin-ice-auth 插件，权限管理</li><li>fusion design UI 组件库</li></ul></li><li><strong>服务端</strong> + <strong>数据库</strong><ul><li>eggjs 服务端框架</li><li>egg-sequelize + mysql2 用于 eggjs 连接 MySQL 数据库</li><li>MySQL 数据库</li><li>uuid 唯一 id 生成</li></ul></li></ul><p>因篇幅较长，如何同时开发小程序+中后台应用（feat: icejs）将分为三篇分别介绍。</p><ul><li>小程序篇（本文）</li></ul><p>使用 icejs 开发 Todo 小程序。</p><ul><li>后台管理系统篇</li></ul><p>使用 icejs 开发 Todo 小程序后台管理系统。</p><ul><li>服务端篇</li></ul><p>搭建服务 Todo 小程序及后台管理系统的服务端。</p><h2 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h2><blockquote><p>项目代码见：<a href="https://github.com/ice-lab/miniprogram-materials/tree/master/scaffolds/todos" target="_blank" rel="noopener">miniprogram-materials/scaffolds/todos</a><br>小程序开发基于icejs，详细内容见 <a href="https://github.com/ice-lab/miniprogram-materials/tree/master/scaffolds/todos" target="_blank" rel="noopener">icejs 小程序开发文档</a></p></blockquote><h3 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h3><p>创建文件夹存放代码</p><pre><code class="hljs bash">$ mkdir todos &amp;&amp; <span class="hljs-built_in">cd</span> todos</code></pre><p>基于 icejs 小程序 JavaScript 模板初始化项目</p><pre><code class="hljs bash">$ npm init ice . <span class="hljs-comment"># 在当前目录下初始项目</span></code></pre><p>选择 JavaScript 小程序模板即 Lightweight JavaScript template with miniapp Program</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2070295/1598521001177-8b125520-f5d4-46f2-a6f8-598e2150ffed.png#align=left&display=inline&height=192&margin=%5Bobject%20Object%5D&originHeight=192&originWidth=471&status=done&style=none&width=471" alt=""></p><p>启动项目</p><pre><code class="hljs bash">$ npm install &amp;&amp; npm run start<span class="hljs-comment"># 从微信开发者工具中导入构建完成后的产物可以看到项目正常运行</span><span class="hljs-comment"># 构建产物位置位于 ./build 目录中。./build/miniapp 为支付宝小程序；./build/wechat-miniprogram 为微信小程序</span></code></pre><blockquote><p><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/devtools.html" target="_blank" rel="noopener">微信开发者工具下载</a><br><a href="https://render.alipay.com/p/f/fd-jwq8nu2a/pages/home/index.html" target="_blank" rel="noopener">支付宝小程序开发工具下载</a></p></blockquote><p>使用微信开发者工具管理小程序<br><img src="https://cdn.nlark.com/yuque/0/2020/png/2070295/1598931377928-a0bf4ffa-3dad-4bc7-81c7-18b5d0d8d087.png#align=left&display=inline&height=344&margin=%5Bobject%20Object%5D&name=image.png&originHeight=688&originWidth=1016&size=108179&status=done&style=none&width=508" alt="image.png"><br>导入构建的小程序包</p><blockquote><p>此处 AppID 应填写自己所申请的小程序 AppID 或使用 测试号</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2070295/1598931459380-01eb51a3-e13f-436b-9ff9-a7fe90111b59.png#align=left&display=inline&height=345&margin=%5Bobject%20Object%5D&name=image.png&originHeight=689&originWidth=1015&size=45416&status=done&style=none&width=507.5" alt="image.png"><br>开发者工具中小程序编译成功<br><img src="https://cdn.nlark.com/yuque/0/2020/png/2070295/1598931572145-a4d6e362-5612-4fcb-87c9-b324ee4db9cb.png#align=left&display=inline&height=511&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1022&originWidth=1916&size=170663&status=done&style=none&width=958" alt="image.png"><br>项目目录结构为：</p><pre><code class="hljs plain">.├── .ice&#x2F;                          # 运行时生成的临时目录├── build&#x2F;                         # 构建产物目录├── src&#x2F;                           # 源码目录│    ├── components                # 应用的公共组件│    │     └── Logo             │    │       ├── index.module.less # Logo 组件的样式文件│    │       └── index.jsx         # Logo 组件 JSX 源码           │    └── pages                     # 页面│    │     └── Home                # home 页面│    │         └── index.jsx│    ├── app.js                    # 应用入口文件│    └── app.json                  # 应用配置，包括路由配置，小程序 window 配置等├── README.md                      # 项目说明├── build.json                     # 项目构建配置├── package.json└── tsconfig.json</code></pre><h3 id="页面编写"><a href="#页面编写" class="headerlink" title="页面编写"></a>页面编写</h3><p>页面编写与使用 React 开发基本一致。</p><p>对于小程序中的生命周期函数，可使用 <code>usePageShow</code>、<code>usePageHide</code> 或者 <code>withPageLifeCycle</code> 等方法进行监听。详细文档见<a href="">页面配置#生命周期</a>。</p><h4 id="Todos-列表页"><a href="#Todos-列表页" class="headerlink" title="Todos 列表页"></a>Todos 列表页</h4><p><strong>创建 src/pages/todos 编写 UI</strong></p><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> React, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;<span class="hljs-keyword">import</span> &#123; usePageShow &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'ice'</span>;<span class="hljs-keyword">import</span> AddButton <span class="hljs-keyword">from</span> <span class="hljs-string">'@/components/add-button'</span>; <span class="hljs-comment">// 组件：添加新 Todo按钮</span><span class="hljs-keyword">import</span> logo <span class="hljs-keyword">from</span> <span class="hljs-string">'@/public/logo.svg'</span>;<span class="hljs-keyword">import</span> styles <span class="hljs-keyword">from</span> <span class="hljs-string">'./index.module.scss'</span>;<span class="hljs-keyword">const</span> Todos = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;  <span class="hljs-comment">// state</span>  <span class="hljs-keyword">const</span> [userInfo, setUserInfo] = useState(&#123;&#125;);  <span class="hljs-keyword">const</span> [todos, setTodos] = useState([]);  <span class="hljs-comment">// handlers</span>  <span class="hljs-keyword">const</span> onTodoChange = <span class="hljs-keyword">async</span> id =&gt; &#123;    <span class="hljs-keyword">let</span> changedContent = &#123;&#125;;    <span class="hljs-keyword">const</span> changedTodos = todos.map(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> &#123;      <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">id</span>: curId &#125; = todo;      <span class="hljs-keyword">const</span> &#123; completed &#125; = todo.content;      <span class="hljs-keyword">if</span> (id === curId) &#123;        changedContent = &#123;          ...todo.content,          completed: id === curId ? !completed : completed        &#125;;      &#125;      <span class="hljs-keyword">return</span> &#123;        ...todo,        content: &#123;          ...todo.content,          completed: id === curId ? !completed : completed        &#125;      &#125;;    &#125;);    setTodos(changedTodos);  &#125;;  <span class="hljs-comment">// lifecycle function</span>  usePageShow(<span class="hljs-keyword">async</span> () =&gt; &#123;    <span class="hljs-keyword">const</span> defaultTodos = [      &#123;        content: &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">'Learning Javascript'</span>, <span class="hljs-attr">completed</span>: <span class="hljs-literal">true</span> &#125;,        id: <span class="hljs-number">0</span>      &#125;,      &#123;        content: &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">'Learning ES2016'</span>, <span class="hljs-attr">completed</span>: <span class="hljs-literal">true</span> &#125;,        id: <span class="hljs-number">1</span>      &#125;,      &#123;        content: &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">'Learning 小程序'</span>, <span class="hljs-attr">completed</span>: <span class="hljs-literal">false</span> &#125;,        id: <span class="hljs-number">2</span>      &#125;,    ]    <span class="hljs-comment">// 暂时使用默认 Todos 测试 UI</span>    setTodos(defaultTodos);  &#125;)  <span class="hljs-keyword">return</span> (    &lt;div className=&#123;styles[<span class="hljs-string">'page-todos'</span>]&#125;&gt;      &lt;div className=&#123;styles.user&#125;&gt;        &lt;button type=<span class="hljs-string">'button'</span> className=&#123;styles[<span class="hljs-string">'login-button'</span>]&#125; &gt;          &lt;div style=&#123;&#123;<span class="hljs-attr">display</span>: <span class="hljs-string">'flex'</span>, <span class="hljs-attr">flexDirection</span>: <span class="hljs-string">'column'</span>&#125;&#125;&gt;            &lt;img className=&#123;styles.avatar&#125; src=&#123;userInfo.avatarUrl ? userInfo.avatarUrl : logo&#125; alt=<span class="hljs-string">"用户头像"</span> /&gt;            &lt;span className=&#123;styles.nickname&#125;&gt;&#123;userInfo.nickName ? <span class="hljs-string">`<span class="hljs-subst">$&#123;userInfo.nickName&#125;</span>'s`</span> : <span class="hljs-string">'My'</span> &#125; Todo List&lt;<span class="hljs-regexp">/span&gt;</span><span class="hljs-regexp">          &lt;/</span>div&gt;        &lt;<span class="hljs-regexp">/button&gt;</span><span class="hljs-regexp">      &lt;/</span>div&gt;            &lt;div className=&#123;styles[<span class="hljs-string">'todo-items'</span>]&#125;&gt;        &lt;div className=&#123;styles[<span class="hljs-string">'todo-items-group'</span>]&#125;&gt;          &#123;            todos.map(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> (              &lt;div style=&#123;&#123;<span class="hljs-attr">position</span>: <span class="hljs-string">'relative'</span>&#125;&#125; key=&#123;todo.id&#125;&gt;                &lt;div                  className=&#123;<span class="hljs-string">`<span class="hljs-subst">$&#123;styles[<span class="hljs-string">'todo-item'</span>]&#125;</span> <span class="hljs-subst">$&#123;todo.content.completed ? styles.checked : <span class="hljs-string">''</span>&#125;</span>`</span>&#125;                  onClick=&#123;() =&gt; onTodoChange(todo.id)&#125;                &gt;                  &lt;checkbox className=&#123;styles[<span class="hljs-string">'todo-item-checkbox'</span>]&#125; checked=&#123;todo.content.completed&#125; /&gt;                  &lt;span className=&#123;styles[<span class="hljs-string">'todo-item-text'</span>]&#125;&gt;&#123;todo.content.text&#125;&lt;<span class="hljs-regexp">/span&gt;</span><span class="hljs-regexp">                &lt;/</span>div&gt;                &lt;div                  className=&#123;styles[<span class="hljs-string">'close-wrapper'</span>]&#125;                  &gt;                  &lt;div className=&#123;styles.close&#125;/&gt;                &lt;<span class="hljs-regexp">/div&gt;</span><span class="hljs-regexp">              &lt;/</span>div&gt;            ))          &#125;        &lt;<span class="hljs-regexp">/div&gt;</span><span class="hljs-regexp">      &lt;/</span>div&gt;      &lt;div className=&#123;styles[<span class="hljs-string">'todo-footer'</span>]&#125;&gt;        &lt;AddButton text=<span class="hljs-string">"Add Todo"</span> /&gt;      &lt;<span class="hljs-regexp">/div&gt;</span><span class="hljs-regexp">    &lt;/</span>div&gt;  );&#125;;<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Todos;</code></pre><p><strong>添加样式</strong></p><pre><code class="hljs css">// src/pages/todos/index.module.scss<span class="hljs-selector-tag">page</span> &#123;  <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;  <span class="hljs-attribute">display</span>: flex;  <span class="hljs-attribute">background</span>: <span class="hljs-number">#323239</span>;  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">"pingFang SC"</span> <span class="hljs-string">"pingFang"</span>;&#125;<span class="hljs-selector-tag">body</span> &#123;  <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;  <span class="hljs-attribute">display</span>: flex;  <span class="hljs-attribute">background</span>: <span class="hljs-number">#323239</span>;  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">"pingFang SC"</span> <span class="hljs-string">"pingFang"</span>;&#125;<span class="hljs-selector-class">.page-todos</span> &#123;  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">"pingFang SC"</span> <span class="hljs-string">"pingFang"</span>;  <span class="hljs-attribute">display</span>: flex;  <span class="hljs-attribute">flex-direction</span>: column;  <span class="hljs-attribute">width</span>: <span class="hljs-number">750</span>rpx;  <span class="hljs-attribute">max-height</span>: <span class="hljs-number">100vh</span>;&#125;<span class="hljs-selector-class">.user</span> &#123;  <span class="hljs-attribute">display</span>: flex;  <span class="hljs-attribute">flex-shrink</span>: <span class="hljs-number">0</span>;  <span class="hljs-attribute">padding</span>: <span class="hljs-number">30px</span>;  <span class="hljs-attribute">color</span>: <span class="hljs-number">#FFF</span>;  <span class="hljs-attribute">flex-direction</span>: column;  <span class="hljs-attribute">align-items</span>: center;&#125;<span class="hljs-selector-class">.login-button</span> &#123;  <span class="hljs-attribute">display</span>: inline-block;  <span class="hljs-attribute">background</span>: none;  <span class="hljs-attribute">border</span>: none;  <span class="hljs-attribute">width</span>: auto;  <span class="hljs-attribute">height</span>: auto;&#125;<span class="hljs-selector-class">.login-button</span><span class="hljs-selector-pseudo">:after</span>&#123;  <span class="hljs-attribute">content</span>: none;&#125;<span class="hljs-selector-class">.avatar</span> &#123;  <span class="hljs-attribute">width</span>: <span class="hljs-number">130</span>rpx;  <span class="hljs-attribute">height</span>: <span class="hljs-number">130</span>rpx;  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#FFF</span>;  <span class="hljs-attribute">align-self</span>: center;&#125;<span class="hljs-selector-class">.nickname</span> &#123;  <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">40</span>rpx;  <span class="hljs-attribute">text-align</span>: center;  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">40</span>rpx;  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">100</span>;  <span class="hljs-attribute">color</span>: <span class="hljs-number">#FFF</span>;&#125;<span class="hljs-selector-class">.todo-items</span> &#123;  <span class="hljs-attribute">flex-grow</span>: <span class="hljs-number">1</span>;  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">34</span>rpx;  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">120</span>rpx;  <span class="hljs-attribute">color</span>: <span class="hljs-number">#0EFFD6</span>;  <span class="hljs-attribute">overflow</span>: auto;&#125;<span class="hljs-selector-class">.todo-items-group</span> &#123;  <span class="hljs-attribute">display</span>: flex;  <span class="hljs-attribute">flex-direction</span>: column;&#125;<span class="hljs-selector-class">.todo-item</span> &#123;  <span class="hljs-attribute">position</span>: relative;  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">50</span>rpx;  <span class="hljs-attribute">padding-left</span>:<span class="hljs-number">80</span>rpx;  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">70</span>rpx;  <span class="hljs-attribute">height</span>: <span class="hljs-number">80</span>rpx;  <span class="hljs-attribute">box-sizing</span>: border-box;  <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid <span class="hljs-built_in">rgb</span>(14, 255, 214);  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">100</span>rpx;  <span class="hljs-attribute">overflow</span>: hidden;  <span class="hljs-attribute">text-overflow</span>: ellipsis;  <span class="hljs-comment">/* white-space:nowrap; */</span>  <span class="hljs-attribute">transition</span>: border <span class="hljs-number">0.2s</span>;&#125;<span class="hljs-selector-class">.todo-item</span><span class="hljs-selector-pseudo">:last-child</span> &#123;  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">0</span>;&#125;<span class="hljs-selector-class">.todo-item</span><span class="hljs-selector-pseudo">::before</span> &#123;  <span class="hljs-attribute">content</span>: <span class="hljs-string">''</span>;  <span class="hljs-attribute">position</span>: absolute;  <span class="hljs-attribute">left</span>: <span class="hljs-number">12</span>rpx;  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">20</span>rpx;  <span class="hljs-attribute">width</span>: <span class="hljs-number">45</span>rpx;  <span class="hljs-attribute">height</span>: <span class="hljs-number">45</span>rpx;  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(14, 222, 255, 0.3);  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;  <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-50%);  <span class="hljs-attribute">transition</span>: background-color <span class="hljs-number">0.2s</span>;&#125;<span class="hljs-selector-class">.todo-item</span><span class="hljs-selector-pseudo">::after</span> &#123;  <span class="hljs-attribute">content</span>: <span class="hljs-string">''</span>;  <span class="hljs-attribute">position</span>: absolute;  <span class="hljs-attribute">left</span>: <span class="hljs-number">29</span>rpx;  <span class="hljs-attribute">width</span>: <span class="hljs-number">8</span>rpx;  <span class="hljs-attribute">height</span>: <span class="hljs-number">18</span>rpx;  <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-60%) <span class="hljs-built_in">rotate</span>(38deg);  <span class="hljs-attribute">border</span>: <span class="hljs-number">4</span>rpx solid <span class="hljs-number">#FFF</span>;  <span class="hljs-attribute">border-width</span>: <span class="hljs-number">0</span> <span class="hljs-number">4</span>rpx <span class="hljs-number">4</span>rpx <span class="hljs-number">0</span>;  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;  <span class="hljs-attribute">transition</span>: opacity <span class="hljs-number">0.2s</span>;&#125;<span class="hljs-selector-class">.todo-item-checkbox</span> &#123;  <span class="hljs-attribute">display</span>: none;&#125;<span class="hljs-selector-class">.checked</span> <span class="hljs-selector-class">.todo-item-text</span> &#123;  <span class="hljs-attribute">text-decoration</span>: line-through;  <span class="hljs-attribute">color</span>: <span class="hljs-number">#1AA0B8</span>;&#125;<span class="hljs-selector-class">.checked</span><span class="hljs-selector-class">.todo-item</span> &#123;  <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid <span class="hljs-built_in">rgba</span>(14, 222, 255, 0.2);&#125;<span class="hljs-selector-class">.checked</span><span class="hljs-selector-class">.todo-item</span><span class="hljs-selector-pseudo">::before</span> &#123;  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(14, 222, 255, 0.2);&#125;<span class="hljs-selector-class">.checked</span><span class="hljs-selector-class">.todo-item</span><span class="hljs-selector-pseudo">::after</span> &#123;  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;&#125;<span class="hljs-selector-class">.todo-item-operation</span> &#123;  <span class="hljs-attribute">display</span>: inline-block;  <span class="hljs-attribute">background</span>: none;  <span class="hljs-attribute">color</span>: <span class="hljs-number">#FFF</span>;  <span class="hljs-attribute">border</span>: none;&#125;<span class="hljs-selector-class">.todo-item-operation</span><span class="hljs-selector-pseudo">:after</span> &#123;  <span class="hljs-attribute">content</span>: none;&#125;<span class="hljs-selector-class">.close-wrapper</span> &#123;  <span class="hljs-attribute">box-sizing</span>: border-box;  <span class="hljs-attribute">position</span>: absolute;  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;  <span class="hljs-attribute">width</span>: <span class="hljs-number">80</span>rpx;  <span class="hljs-attribute">height</span>: <span class="hljs-number">80</span>rpx;  <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">20</span>rpx;  <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">20</span>rpx;&#125;<span class="hljs-selector-class">.close</span> &#123;  <span class="hljs-attribute">box-sizing</span>: border-box;  <span class="hljs-attribute">position</span>: relative;  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;  <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;  <span class="hljs-attribute">width</span>: <span class="hljs-number">40</span>rpx;  <span class="hljs-attribute">height</span>: <span class="hljs-number">40</span>rpx;  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(14, 222, 255, 0.3);&#125;<span class="hljs-selector-class">.close</span><span class="hljs-selector-pseudo">::before</span> &#123;    <span class="hljs-attribute">position</span>: absolute;    <span class="hljs-attribute">content</span>: <span class="hljs-string">' '</span>;    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#2c2c2c</span>;    <span class="hljs-attribute">width</span>: <span class="hljs-number">8</span>rpx;    <span class="hljs-attribute">height</span>: <span class="hljs-number">30</span>rpx;    <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;    <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-50%, -50%) <span class="hljs-built_in">rotate</span>(45deg);&#125;<span class="hljs-selector-class">.close</span><span class="hljs-selector-pseudo">::after</span> &#123;    <span class="hljs-attribute">position</span>: absolute;    <span class="hljs-attribute">content</span>: <span class="hljs-string">' '</span>;    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#2c2c2c</span>;    <span class="hljs-attribute">width</span>: <span class="hljs-number">8</span>rpx;    <span class="hljs-attribute">height</span>: <span class="hljs-number">30</span>rpx;    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4</span>rpx;    <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;    <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-50%, -50%) <span class="hljs-built_in">rotate</span>(-45deg);&#125;<span class="hljs-selector-class">.todo-footer</span> &#123;  <span class="hljs-attribute">flex-shrink</span>: <span class="hljs-number">0</span>;  <span class="hljs-attribute">padding</span>: <span class="hljs-number">50</span>rpx <span class="hljs-number">0</span> <span class="hljs-number">100</span>rpx;  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">48</span>rpx;  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">200</span>;  <span class="hljs-attribute">text-align</span>: center;&#125;</code></pre><p><strong>编写所需组件 add-button</strong></p><pre><code class="hljs jsx"><span class="hljs-comment">// src/components/add-button/index.jsx</span><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;<span class="hljs-keyword">import</span> styles <span class="hljs-keyword">from</span> <span class="hljs-string">'./index.module.scss'</span>;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">AddButton</span> (<span class="hljs-params">props</span>) </span>&#123;  <span class="hljs-keyword">const</span> &#123; text, onClickMe &#125; = props;  <span class="hljs-keyword">return</span> (    &lt;button type=<span class="hljs-string">'button'</span> className=&#123;styles[<span class="hljs-string">'add-button'</span>]&#125; onClick=&#123;onClickMe&#125;&gt;      &lt;span className=&#123;styles[<span class="hljs-string">'add-icon'</span>]&#125;&gt;+<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span>      &lt;span&gt;&#123;text&#125;&lt;<span class="hljs-regexp">/span&gt;</span><span class="hljs-regexp">    &lt;/</span>button&gt;  );&#125;<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> AddButton;</code></pre><p><strong>为组件添加样式</strong></p><pre><code class="hljs jsx"><span class="hljs-comment">// src/components/add-button/index.module.scss</span>.add-button &#123;  display: inline-block;  background: none;  color: #FFF;  border: none;  width: <span class="hljs-number">300</span>rpx;&#125;.add-button:after &#123;  content: none;&#125;.add-icon &#123;  font-size: <span class="hljs-number">52</span>rpx;  color: #00FFD6;  margin-right: <span class="hljs-number">10</span>rpx;&#125;</code></pre><p><strong>添加 logo 图片</strong><br>src/public/logo.svg</p><pre><code class="hljs jsx">&lt;svg xmlns=<span class="hljs-string">"http://www.w3.org/2000/svg"</span> viewBox=<span class="hljs-string">"-11.5 -10.23174 23 20.46348"</span>&gt;  &lt;title&gt;React Logo&lt;<span class="hljs-regexp">/title&gt;</span><span class="hljs-regexp">  &lt;circle cx="0" cy="0" r="2.05" fill="#61dafb"/</span>&gt;  &lt;g stroke=<span class="hljs-string">"#61dafb"</span> stroke-width=<span class="hljs-string">"1"</span> fill=<span class="hljs-string">"none"</span>&gt;    &lt;ellipse rx=<span class="hljs-string">"11"</span> ry=<span class="hljs-string">"4.2"</span>/&gt;    &lt;ellipse rx=<span class="hljs-string">"11"</span> ry=<span class="hljs-string">"4.2"</span> transform=<span class="hljs-string">"rotate(60)"</span>/&gt;    &lt;ellipse rx=<span class="hljs-string">"11"</span> ry=<span class="hljs-string">"4.2"</span> transform=<span class="hljs-string">"rotate(120)"</span>/&gt;  &lt;<span class="hljs-regexp">/g&gt;</span><span class="hljs-regexp">&lt;/</span>svg&gt;</code></pre><p><strong>添加路由</strong><br>编辑 src/app.json</p><pre><code class="hljs json">&#123;  <span class="hljs-attr">"routes"</span>: [ // 页面路由数组    &#123;      "path": "/todos",  // /todos 路由      "source": "pages/todos/index" // 实际 React 组件，即上面所写组件    &#125;,  ]&#125;</code></pre><p><strong>构建小程序</strong></p><pre><code class="hljs bash">$ npm run start <span class="hljs-comment"># 构建小程序</span><span class="hljs-comment"># 将构建产物 ./build/wechat-miniprogram 导入至微信开发者工具中</span></code></pre><p>小程序开发者工具进行编译，实际效果为：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/2070295/1598962296957-1a3b3424-96af-4052-9b78-65457af2956b.png#align=left&display=inline&height=710&margin=%5Bobject%20Object%5D&name=image.png&originHeight=710&originWidth=399&size=45216&status=done&style=none&width=399" alt="image.png"><br>切换 Todo 完成状态<br><img src="https://cdn.nlark.com/yuque/0/2020/png/2070295/1598962311241-f7112c35-8ea1-4ff4-b89c-add990a04713.png#align=left&display=inline&height=709&margin=%5Bobject%20Object%5D&name=image.png&originHeight=709&originWidth=400&size=45554&status=done&style=none&width=400" alt="image.png"><br>Todos 列表页面样式完成。可切换 Todo 完成情况。</p><h4 id="添加-Todo-页"><a href="#添加-Todo-页" class="headerlink" title="添加 Todo 页"></a>添加 Todo 页</h4><p><strong>编写 UI</strong></p><pre><code class="hljs jsx"><span class="hljs-comment">// src/pages/add-todo/index.jsx</span><span class="hljs-keyword">import</span> React, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;<span class="hljs-keyword">import</span> AddButton <span class="hljs-keyword">from</span> <span class="hljs-string">'@/components/add-button'</span>;<span class="hljs-keyword">import</span> styles <span class="hljs-keyword">from</span> <span class="hljs-string">'./index.module.scss'</span>;<span class="hljs-keyword">const</span> AddTodo = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;  <span class="hljs-comment">// state</span>  <span class="hljs-keyword">const</span> [value, setValue] = useState(<span class="hljs-string">''</span>);  <span class="hljs-comment">// handlers</span>  <span class="hljs-keyword">const</span> onChange = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;    setValue(e.target.value);  &#125;;  <span class="hljs-comment">// 省略添加 Todo 逻辑</span>  <span class="hljs-keyword">const</span> add = <span class="hljs-keyword">async</span> () =&gt; &#123;&#125;;  <span class="hljs-keyword">return</span> (    &lt;div className=&#123;styles[<span class="hljs-string">'page-add-todo'</span>]&#125;&gt;      &lt;div className=&#123;styles[<span class="hljs-string">'add-todo'</span>]&#125;&gt;        &lt;input          className=&#123;styles[<span class="hljs-string">'add-todo-input'</span>]&#125;          placeholder=<span class="hljs-string">"What needs to be done?"</span>          value=&#123;value&#125;          onChange=&#123;() =&gt; &#123;&#125;&#125;          onInput=&#123;onChange&#125; /&gt;      &lt;<span class="hljs-regexp">/div&gt;</span><span class="hljs-regexp"></span><span class="hljs-regexp">      &lt;div className=&#123;styles['todo-footer']&#125;&gt;</span><span class="hljs-regexp">        &lt;AddButton text="Add Todo" onClickMe=&#123;add&#125;/</span>&gt;      &lt;<span class="hljs-regexp">/div&gt;</span><span class="hljs-regexp">    &lt;/</span>div&gt;  );&#125;;<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> AddTodo;</code></pre><p><strong>添加样式</strong></p><pre><code class="hljs css">// src/pages/add-todo/index.module.scss<span class="hljs-selector-tag">page</span> &#123;  <span class="hljs-attribute">background</span>: <span class="hljs-number">#323239</span>;  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">"pingFang SC"</span> <span class="hljs-string">"pingFang"</span>;&#125;<span class="hljs-selector-class">.page-add-todo</span> &#123;  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">"pingFang SC"</span> <span class="hljs-string">"pingFang"</span>;  <span class="hljs-attribute">display</span>: flex;  <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;  <span class="hljs-attribute">flex-direction</span>: column;  <span class="hljs-attribute">width</span>: <span class="hljs-number">750</span>rpx;&#125;<span class="hljs-selector-class">.add-todo</span> &#123;  <span class="hljs-attribute">padding</span>: <span class="hljs-number">40px</span>;  <span class="hljs-attribute">flex-grow</span>: <span class="hljs-number">1</span>;  <span class="hljs-attribute">display</span>: flex;  <span class="hljs-attribute">justify-content</span>: center;  <span class="hljs-attribute">align-items</span>: center;&#125;<span class="hljs-selector-class">.add-todo-input</span> &#123;  <span class="hljs-attribute">display</span>: block;  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">50</span>rpx;  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">100</span>;  <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span> <span class="hljs-number">5px</span>;  <span class="hljs-attribute">background</span>: none;  <span class="hljs-attribute">border</span>:none;  <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#DFDFDF</span>;  <span class="hljs-attribute">color</span>: <span class="hljs-number">#0EFFD6</span>;  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;&#125;<span class="hljs-selector-class">.todo-footer</span> &#123;  <span class="hljs-attribute">padding</span>: <span class="hljs-number">50</span>rpx <span class="hljs-number">0</span> <span class="hljs-number">100</span>rpx;  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">48</span>rpx;  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">200</span>;  <span class="hljs-attribute">text-align</span>: center;&#125;</code></pre><p><strong>配置路由</strong></p><pre><code class="hljs json">&#123;  <span class="hljs-attr">"routes"</span>: [  &#123;      <span class="hljs-attr">"path"</span>: <span class="hljs-string">"/add-todo"</span>,      <span class="hljs-attr">"source"</span>: <span class="hljs-string">"pages/add-todo/index"</span>    &#125;，    &#123;      <span class="hljs-attr">"path"</span>: <span class="hljs-string">"/todos"</span>,      <span class="hljs-attr">"source"</span>: <span class="hljs-string">"pages/todos/index"</span>    &#125;  ]&#125;</code></pre><p><strong>微信小程序开发者工具中执行自定义编译</strong></p><ul><li>添加编译模式</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2070295/1598962397413-735fe7cc-aa62-4f6d-a057-2e684d6cd649.png#align=left&display=inline&height=1027&margin=%5Bobject%20Object%5D&name=mp3.png&originHeight=1027&originWidth=1916&size=190538&status=done&style=none&width=1916" alt="mp3.png"></p><ul><li>配置启动页面为 pages/add-todo/index</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2070295/1598962502120-9a9a2d4f-b951-479d-8652-477896eead25.png#align=left&display=inline&height=1023&margin=%5Bobject%20Object%5D&name=mp4.png&originHeight=1023&originWidth=1920&size=183598&status=done&style=none&width=1920" alt="mp4.png"><br>编译后可看到添加 Todo 页面效果<br><img src="https://cdn.nlark.com/yuque/0/2020/png/2070295/1598962525365-97c4d6f9-d180-4bc8-bda7-f88518ac119d.png#align=left&display=inline&height=358&margin=%5Bobject%20Object%5D&name=image.png&originHeight=715&originWidth=397&size=25057&status=done&style=none&width=198.5" alt="image.png">)<img src="https://cdn.nlark.com/yuque/0/2020/png/2070295/1598962542690-911bb7a4-0ad6-4e75-9de7-a26687f3559a.png#align=left&display=inline&height=357&margin=%5Bobject%20Object%5D&name=image.png&originHeight=714&originWidth=403&size=21665&status=done&style=none&width=201.5" alt="image.png"><br><strong>此时的目录结构为：</strong></p><blockquote><p>原有 Logo 组件及 Home 页面未使用可删除。</p></blockquote><pre><code class="hljs markdown">.├── public│   └── index.html├── src│   ├── components│   │   └── add-button     // 新增组件 add-button│   ├── pages│   │   ├── add-todo       // 新增页面 add-todo│   │   └── todos          // 新增页面 todos│   ├── public│   │   └── logo.svg       // 新增 logo 图片│   ├── app.js│   └── app.json├── .eslintrc.js├── .gitignore├── README.md├── build.json├── mini.project.json├── package-lock.json├── package.json└── tsconfig.json</code></pre><h3 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h3><p>与编写 Web 应用不同的是，需要为小程序增加一些配置。如页面路由、tabBar、页面标题等小程序特有属性。</p><p>本程序配置如下：</p><pre><code class="hljs json">// app.json&#123;  <span class="hljs-attr">"routes"</span>: [ // 页面路由    &#123;      <span class="hljs-attr">"path"</span>: <span class="hljs-string">"/todos"</span>,      <span class="hljs-attr">"source"</span>: <span class="hljs-string">"pages/todos/index"</span> // React 组件    &#125;,    &#123;      <span class="hljs-attr">"path"</span>: <span class="hljs-string">"/add-todo"</span>,      <span class="hljs-attr">"source"</span>: <span class="hljs-string">"pages/add-todo/index"</span>    &#125;  ],  "window": &#123; // 页面标题、颜色    "title": "Todo App",    "titleBarColor": "#323239"  &#125;&#125;</code></pre><p>可看到头部颜色及标题发生变化<br><img src="https://cdn.nlark.com/yuque/0/2020/png/2070295/1598963028284-83c512f9-1fb0-4c72-b3c0-b79aa4c84006.png#align=left&display=inline&height=715&margin=%5Bobject%20Object%5D&name=mp-window.png&originHeight=715&originWidth=850&size=61654&status=done&style=none&width=850" alt="mp-window.png"></p><h3 id="数据请求"><a href="#数据请求" class="headerlink" title="数据请求"></a>数据请求</h3><p>通过与后台 API 接口交互将 Todos 同步到远程数据库中。需要用到 universal-request，该库对数据请求进行了封装，使得用户无需关心 web端、微信小程序、支付宝小程序等多平台差异。一套代码、多处运行。</p><h4 id="以获取某用户的-Todos-为例"><a href="#以获取某用户的-Todos-为例" class="headerlink" title="以获取某用户的 Todos 为例"></a>以获取某用户的 Todos 为例</h4><blockquote><p>相关接口见后文服务端</p></blockquote><p>安装 universal-request</p><pre><code class="hljs bash">$ npm install universal-request</code></pre><p>定义数据请求 service</p><pre><code class="hljs javascript"><span class="hljs-comment">// src/services/todos.js</span><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">'universal-request'</span>;<span class="hljs-comment">// 此处为 mock 接口，仅包含查询固定 todos 列表。其他功能如对小程序的增删改查需要服务端</span><span class="hljs-keyword">const</span> URL_PREFIX = <span class="hljs-string">'https://easy-mock.bookset.io/mock/5f4f05642ff5d50508b3d21b/todos_mock'</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;  <span class="hljs-comment">// 根据用户 openId 获取对应 todo 列表</span>  <span class="hljs-keyword">async</span> list (&#123; openId &#125;) &#123;      <span class="hljs-keyword">let</span> todos = [];      <span class="hljs-keyword">try</span> &#123;          <span class="hljs-comment">// openId 未使用，可随意填写</span>          <span class="hljs-keyword">const</span> URL = <span class="hljs-string">`<span class="hljs-subst">$&#123;URL_PREFIX&#125;</span>/api/mp/todos?openId=<span class="hljs-subst">$&#123;openId&#125;</span>`</span>;          <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> request(&#123;              url: URL          &#125;);          todos = res.data.data.todos;      &#125; <span class="hljs-keyword">catch</span> (err) &#123;          <span class="hljs-built_in">console</span>.error(err);      &#125;      <span class="hljs-keyword">return</span> todos;  &#125;&#125;</code></pre><p>Todos 组件中调用该数据请求 service，移除默认 Todos</p><pre><code class="hljs diff">// src/pages/todos/index.jsx<span class="hljs-addition">+ import todosService from '@/services/todos'; // 引入 todos service</span>const Todos = () =&gt; &#123;  // ...  // lifecycle function  // usePageShow 函数修改如下  usePageShow(async () =&gt; &#123;    // 通过数据请求获取 Todos 数据    const todos = await todosService.list(1); // 1 为 openId，暂时未使用可随意填写    setTodos(todos);  &#125;)  return (    // 渲染 todos  );&#125;;</code></pre><p>编译</p><blockquote><p>注意应在微信开发者工具中开启<strong>不校验合法域名</strong></p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2070295/1599028238912-aa9c1d35-bdfd-4a63-8ff2-21bcfd95a90e.png#align=left&display=inline&height=1028&margin=%5Bobject%20Object%5D&name=mp5.png&originHeight=1028&originWidth=1913&size=181778&status=done&style=none&width=1913" alt="mp5.png"><br>执行编译后可得<br><img src="https://cdn.nlark.com/yuque/0/2020/png/2070295/1599028284047-baa3a7c1-4ffd-4b76-90d1-06ae6d034c71.png#align=left&display=inline&height=713&margin=%5Bobject%20Object%5D&name=image.png&originHeight=713&originWidth=401&size=44389&status=done&style=none&width=401" alt="image.png"><br>对于 Todos 列表的增删改查操作需要服务端的支持，此处仅使用 Mock 接口验证数据请求。真实请求逻辑可在服务端篇查看。</p><h3 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h3><p>数据请求小节介绍了如何发起数据请求，但数据请求需要相应的服务端，服务端未完成的情况下，Todo 小程序无法完成 Todo 的增删改查。</p><p>本小节使用微信所提供的数据存储服务，将 Todos 持久化，实现 Todo 的增删改查。</p><ul><li><p>新建数据存储 service</p><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> storageKey = &#123;  todos: <span class="hljs-string">'todos'</span>,  userInfo: <span class="hljs-string">'userInfo'</span>&#125;;<span class="hljs-comment">// 获取存储的 Todos</span><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getStoredTodos</span> (<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-keyword">let</span> todos;  <span class="hljs-keyword">try</span> &#123;    <span class="hljs-comment">// eslint-disable-next-line</span>    <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> wx.getStorage(&#123;      key: storageKey.todos    &#125;);    todos = res.data.todos;  &#125; <span class="hljs-keyword">catch</span> (err) &#123;    <span class="hljs-built_in">console</span>.error(err);  &#125;  <span class="hljs-keyword">return</span> todos;&#125;<span class="hljs-comment">// 存储 Todos</span><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">storeTodos</span> (<span class="hljs-params">todos</span>) </span>&#123;  <span class="hljs-comment">// eslint-disable-next-line</span>  <span class="hljs-keyword">await</span> wx.setStorage(&#123;    key: storageKey.todos,    data: &#123;      todos    &#125;  &#125;);&#125;<span class="hljs-comment">// 获取存储的 userInfo</span><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getUserInfo</span> (<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-keyword">let</span> userInfo;  <span class="hljs-keyword">try</span> &#123;    <span class="hljs-comment">// eslint-disable-next-line</span>    <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> wx.getStorage(&#123;      key: storageKey.userInfo    &#125;);    userInfo = res.data.userInfo;  &#125; <span class="hljs-keyword">catch</span> (err) &#123;    <span class="hljs-built_in">console</span>.error(err);  &#125;  <span class="hljs-keyword">return</span> userInfo;&#125;<span class="hljs-comment">// 存储 userInfo</span><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setUserInfo</span> (<span class="hljs-params">userInfo</span>) </span>&#123;  <span class="hljs-comment">// eslint-disable-next-line</span>  <span class="hljs-keyword">await</span> wx.setStorage(&#123;    key: storageKey.userInfo,    data: &#123;      userInfo    &#125;  &#125;);&#125;<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;  todos: &#123;    <span class="hljs-keyword">get</span>: getStoredTodos,    <span class="hljs-keyword">set</span>: storeTodos  &#125;,  userInfo: &#123;    <span class="hljs-keyword">get</span>: getUserInfo,    <span class="hljs-keyword">set</span>: setUserInfo  &#125;&#125;;</code></pre></li><li><p>todos 组件和 add-todo 组件添加逻辑</p></li></ul><p>todos 组件：</p><ul><li>增加获取用户信息函数 getUserInfo</li><li>增加初始化 Todos 函数：initTodos</li><li>增加添加 Todo 函数：addTodo</li><li>增加删除 Todo 函数：delTodo</li><li>修改编辑 Todo 函数：onTodoChange<pre><code class="hljs jsx"><span class="hljs-comment">// src/pages/todos/index.jsx</span><span class="hljs-keyword">import</span> React, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;<span class="hljs-keyword">import</span> &#123; usePageShow &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'ice'</span>;<span class="hljs-comment">// 引入 storage service</span><span class="hljs-keyword">import</span> storageService <span class="hljs-keyword">from</span> <span class="hljs-string">'@/services/storage'</span>;<span class="hljs-keyword">import</span> AddButton <span class="hljs-keyword">from</span> <span class="hljs-string">'@/components/add-button'</span>;<span class="hljs-keyword">import</span> logo <span class="hljs-keyword">from</span> <span class="hljs-string">'@/public/logo.svg'</span>;<span class="hljs-keyword">import</span> styles <span class="hljs-keyword">from</span> <span class="hljs-string">'./index.module.scss'</span>;<span class="hljs-keyword">const</span> Todos = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;  <span class="hljs-comment">// state</span>  <span class="hljs-keyword">const</span> [userInfo, setUserInfo] = useState(&#123;&#125;);  <span class="hljs-keyword">const</span> [todos, setTodos] = useState([]);  <span class="hljs-comment">// handlers</span>  <span class="hljs-comment">// user</span>  <span class="hljs-keyword">const</span> getUserInfo = <span class="hljs-keyword">async</span> () =&gt; &#123;    <span class="hljs-comment">// eslint-disable-next-line</span>    <span class="hljs-keyword">const</span> storedUserInfo = <span class="hljs-keyword">await</span> storageService.userInfo.get();    <span class="hljs-comment">// eslint-disable-next-line</span>    <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> wx.getUserInfo(); <span class="hljs-comment">// 获取用户信息</span>    <span class="hljs-keyword">const</span> userInfo = res.userInfo;    setUserInfo(userInfo);    <span class="hljs-keyword">await</span> storageService.userInfo.set(userInfo);  &#125;;  <span class="hljs-comment">// todos</span>  <span class="hljs-comment">// 添加 Todo</span>  <span class="hljs-keyword">const</span> addTodo = <span class="hljs-keyword">async</span> () =&gt; &#123;    wx.redirectTo(&#123;      url: <span class="hljs-string">'/pages/add-todo/index'</span>    &#125;);  &#125;;  <span class="hljs-comment">// 修改 Todo 完成状态</span>  <span class="hljs-keyword">const</span> onTodoChange = <span class="hljs-keyword">async</span> id =&gt; &#123;    <span class="hljs-keyword">let</span> changedContent = &#123;&#125;;    <span class="hljs-keyword">const</span> changedTodos = todos.map(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> &#123;      <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">id</span>: curId &#125; = todo;      <span class="hljs-keyword">const</span> &#123; completed &#125; = todo.content;      <span class="hljs-keyword">if</span> (id === curId) &#123;        changedContent = &#123;          ...todo.content,          completed: id === curId ? !completed : completed        &#125;;      &#125;      <span class="hljs-keyword">return</span> &#123;        ...todo,        content: &#123;          ...todo.content,          completed: id === curId ? !completed : completed        &#125;      &#125;;    &#125;);    setTodos(changedTodos);      <span class="hljs-keyword">await</span> storageService.todos.set(changedTodos);  &#125;;  <span class="hljs-comment">// 删除 Todo</span>  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">delTodo</span> (<span class="hljs-params">id</span>) </span>&#123;    <span class="hljs-keyword">const</span> changedTodos = todos.filter(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> &#123;      <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">id</span>: curId &#125; = todo;      <span class="hljs-keyword">return</span> id !== curId;    &#125;);    setTodos(changedTodos);    <span class="hljs-keyword">await</span> storageService.todos.set(changedTodos);  &#125;;  <span class="hljs-comment">// 初始化 Todos</span>  <span class="hljs-keyword">const</span> initTodos = <span class="hljs-keyword">async</span> () =&gt; &#123;    <span class="hljs-keyword">const</span> storedTodos = <span class="hljs-keyword">await</span> storageService.todos.get();    <span class="hljs-keyword">const</span> mergedTodos = storedTodos || [];    <span class="hljs-built_in">console</span>.log(storedTodos, mergedTodos);    setTodos(mergedTodos);    <span class="hljs-keyword">await</span> storageService.todos.set(mergedTodos);  &#125;;  <span class="hljs-comment">// lifecyle function</span>  usePageShow(<span class="hljs-keyword">async</span> () =&gt; &#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'page show'</span>);    <span class="hljs-comment">// eslint-disable-next-line</span>    <span class="hljs-keyword">const</span> storedUserInfo = <span class="hljs-keyword">await</span> storageService.userInfo.get();    setUserInfo(storedUserInfo || &#123;&#125;);    <span class="hljs-keyword">await</span> initTodos();  &#125;);  <span class="hljs-keyword">return</span> (    &lt;div className=&#123;styles[<span class="hljs-string">'page-todos'</span>]&#125;&gt;      &lt;div className=&#123;styles.user&#125;&gt;        &lt;button type=<span class="hljs-string">'button'</span> open-type=<span class="hljs-string">"getUserInfo"</span> onClick=&#123;getUserInfo&#125; className=&#123;styles[<span class="hljs-string">'login-button'</span>]&#125; &gt;          &lt;div style=&#123;&#123;<span class="hljs-attr">display</span>: <span class="hljs-string">'flex'</span>, <span class="hljs-attr">flexDirection</span>: <span class="hljs-string">'column'</span>&#125;&#125;&gt;            &lt;img className=&#123;styles.avatar&#125; src=&#123;userInfo.avatarUrl ? userInfo.avatarUrl : logo&#125; alt=<span class="hljs-string">"用户头像"</span> /&gt;            &lt;span className=&#123;styles.nickname&#125;&gt;&#123;userInfo.nickName ? <span class="hljs-string">`<span class="hljs-subst">$&#123;userInfo.nickName&#125;</span>'s`</span> : <span class="hljs-string">'My'</span> &#125; Todo List&lt;<span class="hljs-regexp">/span&gt;</span><span class="hljs-regexp">          &lt;/</span>div&gt;        &lt;<span class="hljs-regexp">/button&gt;</span><span class="hljs-regexp">      &lt;/</span>div&gt;            &lt;div className=&#123;styles[<span class="hljs-string">'todo-items'</span>]&#125;&gt;        &lt;div className=&#123;styles[<span class="hljs-string">'todo-items-group'</span>]&#125;&gt;          &#123;            todos.map(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> (              &lt;div style=&#123;&#123;<span class="hljs-attr">position</span>: <span class="hljs-string">'relative'</span>&#125;&#125; key=&#123;todo.id&#125;&gt;                &lt;div                  className=&#123;<span class="hljs-string">`<span class="hljs-subst">$&#123;styles[<span class="hljs-string">'todo-item'</span>]&#125;</span> <span class="hljs-subst">$&#123;todo.content.completed ? styles.checked : <span class="hljs-string">''</span>&#125;</span>`</span>&#125;                  onClick=&#123;() =&gt; onTodoChange(todo.id)&#125;                &gt;                  &lt;checkbox className=&#123;styles[<span class="hljs-string">'todo-item-checkbox'</span>]&#125; checked=&#123;todo.content.completed&#125; /&gt;                  &lt;span className=&#123;styles[<span class="hljs-string">'todo-item-text'</span>]&#125;&gt;&#123;todo.content.text&#125;&lt;<span class="hljs-regexp">/span&gt;</span><span class="hljs-regexp">                &lt;/</span>div&gt;                &lt;div                  className=&#123;styles[<span class="hljs-string">'close-wrapper'</span>]&#125;                  onClick=&#123;() =&gt; delTodo(todo.id)&#125;&gt;                  &lt;div className=&#123;styles.close&#125;/&gt;                &lt;<span class="hljs-regexp">/div&gt;</span><span class="hljs-regexp">              &lt;/</span>div&gt;            ))          &#125;        &lt;<span class="hljs-regexp">/div&gt;</span><span class="hljs-regexp">      &lt;/</span>div&gt;      &lt;div className=&#123;styles[<span class="hljs-string">'todo-footer'</span>]&#125;&gt;        &lt;AddButton text=<span class="hljs-string">"Add Todo"</span> onClickMe=&#123;addTodo&#125; /&gt;      &lt;<span class="hljs-regexp">/div&gt;</span><span class="hljs-regexp">    &lt;/</span>div&gt;  );&#125;;<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Todos;</code></pre>add-todo 组件</li></ul><ul><li>修改添加 Todo 函数：add<pre><code class="hljs jsx"><span class="hljs-comment">// src/pages/add-todo/index.jsx</span><span class="hljs-keyword">import</span> React, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;<span class="hljs-comment">// 引入 storage service</span><span class="hljs-keyword">import</span> storageService <span class="hljs-keyword">from</span> <span class="hljs-string">'@/services/storage'</span>;<span class="hljs-keyword">import</span> AddButton <span class="hljs-keyword">from</span> <span class="hljs-string">'@/components/add-button'</span>;<span class="hljs-keyword">import</span> styles <span class="hljs-keyword">from</span> <span class="hljs-string">'./index.module.scss'</span>;<span class="hljs-keyword">const</span> AddTodo = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;  <span class="hljs-comment">// state</span>  <span class="hljs-keyword">const</span> [value, setValue] = useState(<span class="hljs-string">''</span>);  <span class="hljs-comment">// handlers</span>  <span class="hljs-comment">// 输入监听函数</span>  <span class="hljs-keyword">const</span> onChange = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;    setValue(e.target.value);  &#125;;  <span class="hljs-comment">// 添加 Todo</span>  <span class="hljs-keyword">const</span> add = <span class="hljs-keyword">async</span> () =&gt; &#123;    <span class="hljs-keyword">const</span> curTodos = <span class="hljs-keyword">await</span> storageService.todos.get();    <span class="hljs-keyword">const</span> todo = &#123;      id: (<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()).getTime(),      content: &#123;        text: value,        completed: <span class="hljs-literal">false</span>      &#125;    &#125;    <span class="hljs-keyword">const</span> newTodos = curTodos.concat(todo);    storageService.todos.set(newTodos);    <span class="hljs-comment">// eslint-disable-next-line</span>    wx.redirectTo(&#123;      url: <span class="hljs-string">'/pages/todos/index'</span>    &#125;);  &#125;;  <span class="hljs-keyword">return</span> (    &lt;div className=&#123;styles[<span class="hljs-string">'page-add-todo'</span>]&#125;&gt;      &lt;div className=&#123;styles[<span class="hljs-string">'add-todo'</span>]&#125;&gt;        &lt;input          className=&#123;styles[<span class="hljs-string">'add-todo-input'</span>]&#125;          placeholder=<span class="hljs-string">"What needs to be done?"</span>          value=&#123;value&#125;          onChange=&#123;() =&gt; &#123;&#125;&#125;          onInput=&#123;onChange&#125; /&gt;      &lt;<span class="hljs-regexp">/div&gt;</span><span class="hljs-regexp"></span><span class="hljs-regexp">      &lt;div className=&#123;styles['todo-footer']&#125;&gt;</span><span class="hljs-regexp">        &lt;AddButton text="Add Todo" onClickMe=&#123;add&#125;/</span>&gt;      &lt;<span class="hljs-regexp">/div&gt;</span><span class="hljs-regexp">    &lt;/</span>div&gt;  );&#125;;<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> AddTodo;</code></pre>执行编译，运行项目<br>此时，本程序可获取用户基本信息，增加 Todo。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2070295/1599037234361-0165b321-d833-4de3-9ac4-75924cc989b5.png#align=left&display=inline&height=1559&margin=%5Bobject%20Object%5D&name=mp11.png&originHeight=1559&originWidth=1276&size=112351&status=done&style=none&width=1276" alt="mp11.png"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>至此，小程序部分已基本完成。</p><p>本文介绍了使用 icejs开发小程序的基本流程，包括使用组件 UI 的编写；路由及其它小程序相关的项目配置；发起数据请求；调用微信小程序 API 获取用户信息和存储数据。</p><p>小程序同步 Todo 列表至服务端需要服务端的配合，故将该功能在服务端篇进行实现。</p><p>小程序代码见 <a href="https://github.com/ice-lab/miniprogram-materials/tree/master/scaffolds/todos" target="_blank" rel="noopener">miniprogram-materials/scaffolds/todos</a>，可结合服务端 <a href="https://github.com/ice-lab/icejs-miniapp-admin/tree/master/server" target="_blank" rel="noopener">icejs-miniapp-admin/server</a> 一起运行查看效果。</p><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><ul><li><a href="https://ice.work/" target="_blank" rel="noopener">飞冰</a></li><li><a href="https://ice.work/docs/miniprogram/start" target="_blank" rel="noopener">icejs 小程序官方文档</a></li><li><a href="https://github.com/ice-lab/miniprogram-materials/tree/master/scaffolds/todos" target="_blank" rel="noopener">Todos 小程序代码</a></li><li><a href="https://github.com/ice-lab/icejs-miniapp-admin/client" target="_blank" rel="noopener">Todos 后台管理系统代码</a></li><li><a href="https://github.com/ice-lab/icejs-miniapp-admin/tree/master/server" target="_blank" rel="noopener">Todos 服务端代码</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;如何同时开发小程序-中后台应用-feat-icejs-小程序篇&quot;&gt;&lt;a href=&quot;#如何同时开发小程序-中后台应用-feat-icejs-小程序篇&quot; class=&quot;headerlink&quot; title=&quot;如何同时开发小程序+中后台应用(feat: icejs) -
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Emoji-cheatsheet</title>
    <link href="https://lancezhu.github.io/2020/10/12/cheatsheet-emoji/"/>
    <id>https://lancezhu.github.io/2020/10/12/cheatsheet-emoji/</id>
    <published>2020-10-12T09:44:19.000Z</published>
    <updated>2020-10-12T09:44:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.webfx.com/tools/emoji-cheat-sheet/" target="_blank" rel="noopener">emoji cheatsheet</a><br><span class="github-emoji" alias="tada" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8">&#x1f389;</span></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.webfx.com/tools/emoji-cheat-sheet/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;emoji cheatsheet&lt;/a&gt;&lt;br&gt;&lt;span class=&quot;github-emoji
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java-cheatsheet</title>
    <link href="https://lancezhu.github.io/2020/10/12/cheatsheet-Java/"/>
    <id>https://lancezhu.github.io/2020/10/12/cheatsheet-Java/</id>
    <published>2020-10-12T09:42:14.000Z</published>
    <updated>2020-10-12T09:42:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><h2 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h2><p><a href="https://www.oracle.com/java/technologies/javase-downloads.html" target="_blank" rel="noopener">java se</a></p><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><pre><code class="hljs bash">$ tar -zxvf jdk.tar.gz   // 解压$ mkdir /usr/java$ cp jdk /usr/java -r    // 移动至安装目录$ sudo vim /etc/profile // 配置环境变量<span class="hljs-comment"># or</span>$ sudo vim ~/.zshrc<span class="hljs-comment"># /etc/profile or ~/.zshrc</span><span class="hljs-comment"># export JAVA_HOME=/usr/java/jdk</span><span class="hljs-comment"># export JRE_HOME=$JAVA_HOME/jre</span><span class="hljs-comment"># export PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span>java // 安装验证</code></pre><h2 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h2><h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><h4 id="Download-1"><a href="#Download-1" class="headerlink" title="Download"></a>Download</h4><p><a href="https://maven.apache.org/download.cgi" target="_blank" rel="noopener">maven apache</a></p><h4 id="Installation-1"><a href="#Installation-1" class="headerlink" title="Installation"></a>Installation</h4><pre><code class="hljs bash"><span class="hljs-comment"># 安装方式为 tar.gz 压缩包形式</span>$ tar -zxvf apache-maven.tar.gz // 解压$ mkdir /usr/maven$ cp apache-maven /usr/maven -r    // 移动至安装目录$ sudo vim /etc/profile // 配置环境变量<span class="hljs-comment"># or</span>$ sudo vim ~/.zshrc<span class="hljs-comment"># /etc/profile or ~/.zshrc</span><span class="hljs-comment"># export MAVEN_HOME=/usr/maven/apache-maven</span><span class="hljs-comment"># export PATH=$PATH:$MAVEN_HOME/bin</span>mvn -V // 安装验证</code></pre><hr><pre><code class="hljs bash"><span class="hljs-comment"># Ubuntu openjdk</span>$ sudo apt install default-jrejava --version$ sudo apt install default-jdkjavac --version</code></pre><h4 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h4><pre><code class="hljs bash">$ sudo vim <span class="hljs-variable">$MAVEN_HOME</span>/conf/setting.xml</code></pre><p>添加 阿里云 源</p><pre><code class="hljs diff">&lt;mirrors&gt;<span class="hljs-addition">+  &lt;mirror&gt;</span><span class="hljs-addition">+    &lt;id&gt;nexus-aliyun&lt;/id&gt;</span><span class="hljs-addition">+    &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><span class="hljs-addition">+    &lt;name&gt;Nexus aliyun&lt;/name&gt;</span><span class="hljs-addition">+    &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;</span><span class="hljs-addition">+  &lt;/mirror&gt;</span>&lt;mirrors&gt;</code></pre><h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><p><a href="https://tomcat.apache.org/" target="_blank" rel="noopener">官网</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java&quot;&gt;&lt;a href=&quot;#Java&quot; class=&quot;headerlink&quot; title=&quot;Java&quot;&gt;&lt;/a&gt;Java&lt;/h1&gt;&lt;h2 id=&quot;Download&quot;&gt;&lt;a href=&quot;#Download&quot; class=&quot;headerlink&quot; title=&quot;D
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ssh 访问日志分析</title>
    <link href="https://lancezhu.github.io/2020/08/01/ssh-access-analysis/"/>
    <id>https://lancezhu.github.io/2020/08/01/ssh-access-analysis/</id>
    <published>2020-08-01T05:31:00.000Z</published>
    <updated>2020-08-01T05:31:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSH-访问日志分析"><a href="#SSH-访问日志分析" class="headerlink" title="SSH 访问日志分析"></a>SSH 访问日志分析</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本科毕业，<a href="https://cloud.tencent.com/act/campus" target="_blank" rel="noopener">腾讯云 + 校园</a> 学生认证身份过期，无法享用之前每月仅需一元的优惠，<a href="blog-migration">博客迁移</a> 至 <a href="https://promotion.aliyun.com/ntms/act/campus2018.html?userCode=zxog1qrs&tag=share_component&share_source=copy_link" target="_blank" rel="noopener">阿里云</a>。之前有看到过对服务器 <code>SSH</code>日志分析的一篇文章，故也想做些类似的分析。</p><h2 id="分析内容"><a href="#分析内容" class="headerlink" title="分析内容"></a>分析内容</h2><p><code>SSH</code> 访问数据</p><ul><li><input checked="" disabled="" type="checkbox"> 访问日志总量</li><li><input checked="" disabled="" type="checkbox"> 用户名 top10</li><li><input checked="" disabled="" type="checkbox"> 访问 IP top10</li><li><input disabled="" type="checkbox"> 访问 IP 分布，借助<a href="https://github.com/animalize/qqwry-python3" target="_blank" rel="noopener">纯真数据库</a></li><li><input disabled="" type="checkbox"> <del>访问时间分布</del></li></ul><h2 id="具体分析"><a href="#具体分析" class="headerlink" title="具体分析"></a>具体分析</h2><blockquote><p>本部分比较混乱，可不看，结论见 <code>分析结果</code>。</p></blockquote><h4 id="未清洗数据"><a href="#未清洗数据" class="headerlink" title="未清洗数据"></a>未清洗数据</h4><pre><code class="hljs sh">// 统计所有日志文件及文件行数$ ls | xargs wc -l | awk <span class="hljs-string">'&#123;print $2, $1&#125;'</span>auth.log 70039auth.log-201905101557440703 444627auth.log-201905231558563904 419331auth.log-201906071559859904 417979auth.log-201906241561328703 412512auth.log-201907041562192703 415592auth.log-201907171563315904 426805auth.log-201907271564179903 422477auth.log-201908081565216703 405232auth.log-201908211566339904 408350auth.log-201909061567722303 426589auth.log-201909171568672705 400635auth.log-201910021569968703 390301auth.log-201910141571005504 393317auth.log-201910261572042303 414514auth.log-201911031572733505 401419auth.log-201911171573943103 410552auth.log-201911301575066303 420348auth.log-201912071575671103 423932auth.log-201912121576103103 395790auth.log-201912181576621504 453579auth.log-201912271577399104 403452auth.log-202001081578435903 469772auth.log-202001211579559103 399332auth.log-202002061580941504 409619auth.log-202003041583274305 390374total 10446469</code></pre><pre><code class="hljs sh">// 统计文件大小$ ls -l | awk <span class="hljs-string">'BEGIN &#123;sum=0&#125; NR!=1 &#123;sum+=$5; print $9, $5&#125; END &#123;print "total " sum " " sum/1024/1024 "M"&#125;'</span>auth.log 7235504auth.log-201905101557440703 46798951auth.log-201905231558563904 42868529auth.log-201906071559859904 42887760auth.log-201906241561328703 43018812auth.log-201907041562192703 43343508auth.log-201907171563315904 44048692auth.log-201907271564179903 43478168auth.log-201908081565216703 42309178auth.log-201908211566339904 42010693auth.log-201909061567722303 45996353auth.log-201909171568672705 42921548auth.log-201910021569968703 42086718auth.log-201910141571005504 42284091auth.log-201910261572042303 44426083auth.log-201911031572733505 43654955auth.log-201911171573943103 43578151auth.log-201911301575066303 44902797auth.log-201912071575671103 45356384auth.log-201912121576103103 41986986auth.log-201912181576621504 48834325auth.log-201912271577399104 42789719auth.log-202001081578435903 49508107auth.log-202001211579559103 42864190auth.log-202002061580941504 44967557auth.log-202003041583274305 41996783total 1106154542 1054.91M</code></pre><h4 id="清洗数据"><a href="#清洗数据" class="headerlink" title="清洗数据"></a>清洗数据</h4><p><strong>合并文件</strong></p><pre><code class="hljs sh">$ ls | awk <span class="hljs-string">'/^auth.log*/'</span> | xargs cat &gt;&gt; total.log</code></pre><p><strong>筛选无效登录</strong></p><pre><code class="hljs sh">$ grep <span class="hljs-string">'Failed'</span> total.log &gt; failed_auth/total.log</code></pre><p><strong>统计数据量</strong></p><pre><code class="hljs sh">$ wc -l failed_auth/total.log1977438 failed_auth/total.log</code></pre><p>筛选无效登录</p><pre><code class="hljs sh">$ grep <span class="hljs-string">'invalid'</span> failed_auth/total.log &gt; failed_auth/failed.log</code></pre><p><strong>统计无效用户名</strong></p><pre><code class="hljs sh">$ wc -l failed_auth/invalid.log870098 failed_auth/invalid.log</code></pre><pre><code class="hljs sh">$ cat failed_auth/invalid.log | awk <span class="hljs-string">'&#123;print $11&#125;'</span> | sort -r | uniq -c | sort -rn | head -10  59789 admin  19975 <span class="hljs-built_in">test</span>  10894 user   9207 oracle   7733 guest   7318 postgres   5374 git   5089 ubnt   4851 nagios   4473 support</code></pre><pre><code class="hljs sh">10691 45.136.108.85 9469 43.248.189.33 6728 95.110.201.243 4232 139.217.230.232 4187 45.141.86.128 3139 193.105.134.96 3128 103.82.28.2 3032 185.153.199.155 2987 185.153.199.125 2889 109.89.51.159</code></pre><p><strong>统计有效用户名</strong></p><pre><code class="hljs sh">$ grep -v <span class="hljs-string">'invalid'</span> failed_auth/total.log &gt; failed_auth/valid.log</code></pre><pre><code class="hljs sh">$ wc -l failed_auth/valid.log1107340 failed_auth/valid.log</code></pre><pre><code class="hljs sh">$ grep -v <span class="hljs-string">'repeated'</span> failed_auth/valid.log &gt; failed_auth/valid_without_repeated_message.log</code></pre><pre><code class="hljs sh">$ wc -l failed_auth/valid_without_repeated_message.log1041122 failed_auth/valid_without_repeated_message.log</code></pre><pre><code class="hljs sh">$ cat failed_auth/valid_without_repeated_message.log | awk <span class="hljs-string">'&#123;print $11&#125;'</span> | sort -r | uniq -c | sort -rn | head -10  40537 139.198.122.90  32721 139.198.17.33  25118 43.248.189.33  23543 139.198.13.87  23540 139.219.236.62  23536 139.199.132.175  23528 139.199.19.153  22029 139.217.233.36  19751 139.219.3.80  14781 139.198.18.152</code></pre><h2 id="分析结果"><a href="#分析结果" class="headerlink" title="分析结果"></a>分析结果</h2><p><strong>日志基本数据</strong></p><ul><li><p>时间：2019/05 - 2020/03</p></li><li><p>大小：1.1G</p></li><li><p>数据量：</p><ul><li>10446469 条</li></ul></li></ul><p><strong>用户名 top10</strong></p><p>统计访问日志中登录失败用户名 top10。</p><pre><code class="hljs shell">admintestuseroracleguestpostgresgitubntnagiossupport</code></pre><p><strong>访问 IP top10</strong></p><p>统计访问日志中登录失败对应 IP top10.</p><pre><code class="hljs shell">139.198.122.90139.198.17.3343.248.189.33139.198.13.87139.219.236.62139.199.132.175139.199.19.153139.217.233.36139.219.3.80139.198.18.152</code></pre><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><ul><li><a href="https://coolshell.cn/articles/19219.html" target="_blank" rel="noopener">打造高效的工作环境 – SHELL 篇</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SSH-访问日志分析&quot;&gt;&lt;a href=&quot;#SSH-访问日志分析&quot; class=&quot;headerlink&quot; title=&quot;SSH 访问日志分析&quot;&gt;&lt;/a&gt;SSH 访问日志分析&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://lancezhu.github.io/categories/Linux/"/>
    
    
      <category term="SSH,Linux" scheme="https://lancezhu.github.io/tags/SSH-Linux/"/>
    
  </entry>
  
  <entry>
    <title>tmux</title>
    <link href="https://lancezhu.github.io/2020/07/11/tmux/"/>
    <id>https://lancezhu.github.io/2020/07/11/tmux/</id>
    <published>2020-07-11T11:01:00.000Z</published>
    <updated>2021-03-28T11:01:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a>tmux</h1><h2 id="tmux-terminal-multiplexer"><a href="#tmux-terminal-multiplexer" class="headerlink" title="tmux - terminal multiplexer"></a>tmux - terminal multiplexer</h2><p>通过 session window pane 三个维度复用</p><h2 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h2><pre><code class="hljs shell">tmux // 新建sessionctrl+b % // 左右分割为两个panectrl+b " // 上下分割为两个panectrl+b w // 显示 windowctrl+b q // 显示pane对应序号ctrl+b o // 千幻 panectrl+b x // 关闭当前panectrl+b d // detach 当前 sessiontmux list-session // 列出所有sessiontmux attach-session -t 序号 // attach到对应sessiontmux kill-session -t 序号 // kill 对应 session</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;tmux&quot;&gt;&lt;a href=&quot;#tmux&quot; class=&quot;headerlink&quot; title=&quot;tmux&quot;&gt;&lt;/a&gt;tmux&lt;/h1&gt;&lt;h2 id=&quot;tmux-terminal-multiplexer&quot;&gt;&lt;a href=&quot;#tmux-terminal-multip
      
    
    </summary>
    
    
      <category term="Linux,cheatsheet" scheme="https://lancezhu.github.io/categories/Linux-cheatsheet/"/>
    
    
      <category term="Linux,tmux,Software" scheme="https://lancezhu.github.io/tags/Linux-tmux-Software/"/>
    
  </entry>
  
</feed>
